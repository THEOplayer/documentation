"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["13469"],{184134:function(e,n,t){t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var r=t(740790),o=t(474848),i=t(884429);let a={},s="Token based security",c={},l=[{value:"Setting up the React Native THEOplayer SDK for THEOlive",id:"setting-up-the-react-native-theoplayer-sdk-for-theolive",level:2},{value:"Configuring THEOplayer to pass the token",id:"configuring-theoplayer-to-pass-the-token",level:2},{value:"Dealing with token expiry and rotation",id:"dealing-with-token-expiry-and-rotation",level:2},{value:"Clearing the token",id:"clearing-the-token",level:2},{value:"Enabling Token Based Security for Safari browsers on iOS &lt;17",id:"enabling-token-based-security-for-safari-browsers-on-ios-17",level:2}];function d(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"token-based-security",children:"Token based security"})}),"\n",(0,o.jsxs)(n.p,{children:["THEOlive offers the option to enable JWT token security on channel distribution level. This can be interesting if you only want valid users to access your stream. Read more about the feature and configuring it on your channels on the ",(0,o.jsx)(n.a,{href:"/theolive/platform/security/token-based-security",children:"token based security guide"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"This page will demonstrate how to configure the React Native Player SDK for playback of channels with token based security enabled."}),"\n",(0,o.jsx)(n.h2,{id:"setting-up-the-react-native-theoplayer-sdk-for-theolive",children:"Setting up the React Native THEOplayer SDK for THEOlive"}),"\n",(0,o.jsxs)(n.p,{children:["Refer to the ",(0,o.jsx)(n.a,{href:"../getting-started",children:"getting started guide"})," for the prerequisite steps in getting the React Native SDK up and running for THEOlive playback."]}),"\n",(0,o.jsx)(n.h2,{id:"configuring-theoplayer-to-pass-the-token",children:"Configuring THEOplayer to pass the token"}),"\n",(0,o.jsx)(n.p,{children:"The THEOlive API provides a simple property to configure your token:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const token = getToken(); // Generate or request your token, for more information check the token based security guide linked above.\nplayer.theolive.authToken = token;\n"})}),"\n",(0,o.jsx)(n.p,{children:"This will ensure the player includes your token in the authorization header on all subsequent requests it performs for playback of your THEOlive channel."}),"\n",(0,o.jsx)(n.h2,{id:"dealing-with-token-expiry-and-rotation",children:"Dealing with token expiry and rotation"}),"\n",(0,o.jsx)(n.p,{children:"If your tokens are short-lived, you want to make sure to update the token being passed to the player and requests before it expires, to allow playback to continue beyond expiry. This can simply be done by updating the header on the player in the same way. For example, one could check on an interval that makes sense for your token lifespan whether the token is about to expire and update when necessary, for example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"let token;\n\n// Helper function to check whether your token will expire within one minute from now\nfunction tokenWillExpireSoon() {\n  const payload = JSON.parse(atob(token.split('.')[1]));\n  const exp = payload.exp; // in seconds\n  const now = Math.floor(Date.now() / 1000); // current time in seconds\n  return exp - now <= 60;\n}\n\nfunction maybeUpdateToken() {\n  if (!token || tokenWillExpireSoon(token)) {\n    token = getToken(); // Generate or request your token, for more information check the token based security guide linked above.\n    player.theolive.authToken = token;\n  }\n}\n\nmaybeUpdateToken();\nsetInterval(maybeUpdateToken, 30000); // Check every 30 seconds\n"})}),"\n",(0,o.jsx)(n.h2,{id:"clearing-the-token",children:"Clearing the token"}),"\n",(0,o.jsx)(n.p,{children:"If the token isn't needed anymore, e.g. when switching to an unprotected channel or a non-THEOlive source altogether, the header can be simply removed as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"player.theolive.authToken = undefined;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"enabling-token-based-security-for-safari-browsers-on-ios-17",children:"Enabling Token Based Security for Safari browsers on iOS <17"}),"\n",(0,o.jsx)(n.p,{children:"Apple devices running an iOS version lower than 17.1 do not support MSE, therefore there are limitations with what is possible when playing a THEOlive stream. One such limitation is that the above network API approach does not work on those devices. Instead, a service worker needs to be registered to support playback of JWT enabled streams."}),"\n",(0,o.jsxs)(n.p,{children:["The service worker needs to intercept the ",(0,o.jsx)(n.code,{children:"fetch"})," requests originating from the app, to be able to include the ",(0,o.jsx)(n.code,{children:"Authorization"})," header to the requests."]}),"\n",(0,o.jsx)(n.p,{children:"A code snippet for the service worker code is shared below."}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["Service worker registration is only possible in a secure environment (",(0,o.jsx)(n.code,{children:"https://"}),") or on ",(0,o.jsx)(n.code,{children:"localhost"}),". There can also only be one service worker active, so if your environment or application already has a service worker active, you will need to include the additional functionality in that service worker."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'title="iOS Safari service worker"',children:"self.addEventListener('install', () => {\n  console.log('Service worker installed!');\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker activated');\n  // Claim clients so the service worker is in effect immediately\n  event.waitUntil(self.clients.claim());\n});\n\n// Intercept the fetch event and add in your JWT\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    (async function () {\n      try {\n        const url = new URL(event.request.url);\n        if (!url.origin.endsWith('theo.live')) {\n          // Requests not made by the player for playback of the THEOlive channel should not be modified.\n          return fetch(event.request);\n        }\n        const token = getToken(); // Generate or request your token, for more information check the token based security guide linked above.\n        // Clone the request and add the JWT header\n        const modifiedRequest = new Request(event.request, {\n          headers: {\n            ...Object.fromEntries(event.request.headers.entries()),\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        return fetch(modifiedRequest);\n      } catch (error) {\n        console.error('Error in fetch handler:', error);\n        return new Response('Service Worker Error', { status: 500 });\n      }\n    })()\n  );\n});\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"In order for the service worker to be able to intercept requests made from the player library, its scope must include the player SDK files. That means the player and service worker must be hosted on the same path or the player must be hosted in a subfolder of the path where the service worker is hosted."})}),"\n",(0,o.jsx)(n.p,{children:"To register this service worker in to your code, you can attach it this way."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'title="Register service worker"',children:"function registerServiceWorker() {\n  if (!('serviceWorker' in navigator)) {\n    console.error('Service worker not supported!');\n    return;\n  }\n  const serviceWorkerScope = \"/service/worker/path\" // Replace with your own path to the service worker location.\n  const serviceWorkerPath = \"${root}/service-worker.js\"; // Replace with the filename of your service worker.\n\n  // We recommend unregistering actively before (re-)registering as we've seen issues where hard reloads could cause issues if the service worker wasn't unregistered.\n  const registration = await navigator.serviceWorker.getRegistration(serviceWorkerPath);\n  await registration?.unregister();\n\n  navigator.serviceWorker\n    .register(serviceWorkerPath, {\n      scope: serviceWorkerScope,\n    })\n    .then((reg) => {\n      if (reg.active) console.log('Service worker registered!');\n    })\n    .catch((err) => {\n      console.error('Could not register service worker!', err);\n    });\n};\n\n// Initialise the service worker some time early in the processs.\nif (!(window.MediaSource || window.ManagedMediaSource)) {\n  registerServiceWorker();\n}\n"})})]})}function h(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},884429:function(e,n,t){t.d(n,{R:()=>a,x:()=>s});var r=t(296540);let o={},i=r.createContext(o);function a(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},740790:function(e){e.exports=JSON.parse('{"id":"playback/react-native/token-based-security","title":"Token based security","description":"THEOlive offers the option to enable JWT token security on channel distribution level. This can be interesting if you only want valid users to access your stream. Read more about the feature and configuring it on your channels on the token based security guide.","source":"@site/theolive/playback/react-native/token-based-security.mdx","sourceDirName":"playback/react-native","slug":"/playback/react-native/token-based-security","permalink":"/documentation/pr-preview/pr-441/theolive/playback/react-native/token-based-security","draft":false,"unlisted":false,"editUrl":"https://github.com/THEOplayer/documentation/blob/-/theolive/playback/react-native/token-based-security.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"theolive","previous":{"title":"Getting started with React Native","permalink":"/documentation/pr-preview/pr-441/theolive/playback/react-native/getting-started"},"next":{"title":"Getting started with Roku","permalink":"/documentation/pr-preview/pr-441/theolive/playback/roku/getting-started"}}')}}]);