"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["89793"],{15413:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>a,metadata:()=>o,assets:()=>l,toc:()=>c,contentTitle:()=>s});var o=JSON.parse('{"id":"how-to-guides/ui/how-to-build-chromeless-ui","title":"How to build a Chromeless UI","description":"A Chromeless UI comes into play when your envisioned video player UI too different from the default THEOplayer UI.","source":"@site/theoplayer_versioned_docs/version-v6/how-to-guides/11-ui/06-how-to-build-chromeless-ui.mdx","sourceDirName":"how-to-guides/11-ui","slug":"/how-to-guides/ui/how-to-build-chromeless-ui","permalink":"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/ui/how-to-build-chromeless-ui","draft":false,"unlisted":false,"editUrl":"https://github.com/THEOplayer/documentation/blob/-/theoplayer_versioned_docs/version-v6/how-to-guides/11-ui/06-how-to-build-chromeless-ui.mdx","tags":[],"version":"v6","sidebarPosition":6,"frontMatter":{},"sidebar":"roku","previous":{"title":"Is it possible to hide/disable the Google IMA UI?","permalink":"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/ui/is-it-possible-to-hide-googla-ima"},"next":{"title":"How to insert a button","permalink":"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/ui/how-to-insert-a-button"}}'),i=t("85893"),r=t("50065");let a={},s="How to build a Chromeless UI",l={},c=[{value:"Creating a Chromeless player instance",id:"creating-a-chromeless-player-instance",level:2},{value:"Web SDK",id:"web-sdk",level:4},{value:"Legacy Android SDK (4.12.x)",id:"legacy-android-sdk-412x",level:5},{value:"iOS/tvOS SDK and Legacy iOS/tvOS SDK (4.12.x)",id:"iostvos-sdk-and-legacy-iostvos-sdk-412x",level:4},{value:"Using a WebView in legacy Android/iOS SDKs (4.12.x)",id:"using-a-webview-in-legacy-androidios-sdks-412x",level:2},{value:"Tracking transitions between states",id:"tracking-transitions-between-states",level:2},{value:"Mapping components",id:"mapping-components",level:2},{value:"Play button",id:"play-button",level:3},{value:"Pause button",id:"pause-button",level:3},{value:"Volume mute button",id:"volume-mute-button",level:3},{value:"Volume change button",id:"volume-change-button",level:3},{value:"Current time text",id:"current-time-text",level:3},{value:"Duration text",id:"duration-text",level:3},{value:"Scrub bar",id:"scrub-bar",level:3},{value:"Buffered blocks",id:"buffered-blocks",level:4},{value:"Live button",id:"live-button",level:3},{value:"Audio change component",id:"audio-change-component",level:3},{value:"Subtitle change component",id:"subtitle-change-component",level:3},{value:"Video quality change component",id:"video-quality-change-component",level:3},{value:"Fullscreen and inline button",id:"fullscreen-and-inline-button",level:3},{value:"Web SDK",id:"web-sdk-1",level:4},{value:"Android SDK",id:"android-sdk",level:4},{value:"iOS/tvOS SDK and Legacy iOS/tvOS SDK (4.12.x)",id:"iostvos-sdk-and-legacy-iostvos-sdk-412x-1",level:4},{value:"Picture-in-picture button",id:"picture-in-picture-button",level:3},{value:"Chromecast button",id:"chromecast-button",level:3},{value:"AirPlay button",id:"airplay-button",level:3},{value:"Subtitle cues",id:"subtitle-cues",level:3},{value:"Advertisement metadata",id:"advertisement-metadata",level:3},{value:"Sample code",id:"sample-code",level:2},{value:"Web SDK",id:"web-sdk-2",level:3},{value:"Android SDK",id:"android-sdk-1",level:3},{value:"iOS/tvOS SDK and Legacy iOS/tvOS SDK (4.12.x)",id:"iostvos-sdk-and-legacy-iostvos-sdk-412x-2",level:3},{value:"Roku SDK",id:"roku-sdk",level:3},{value:"UX Enhancements",id:"ux-enhancements",level:2},{value:"Error handling",id:"error-handling",level:2},{value:"Roku SDK",id:"roku-sdk-1",level:2},{value:"Display chromeless player",id:"display-chromeless-player",level:3},{value:"Control bar Play, Pause, Stop buttons",id:"control-bar-play-pause-stop-buttons",level:3},{value:"Control bar Switch audio or text tracks",id:"control-bar-switch-audio-or-text-tracks",level:3}];function d(e){let n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"how-to-build-a-chromeless-ui",children:"How to build a Chromeless UI"})}),"\n","\n",(0,i.jsxs)(n.p,{children:["A Chromeless UI comes into play when your envisioned video player UI too different from the default ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/ui/introduction",children:"THEOplayer UI"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Building a Chromeless UI means building a brand-new video player UI from scratch.\nYou achieve this by implementing your own custom UI components, and by associating those\ncomponents with the appropriate THEOplayer API.\nThe screenshot below visualizes such a Chromeless UI -- albeit not the most pretty one."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Chromeless UI Layout",src:t(56409).Z+"",title:"Chromeless UI Layout",width:"873",height:"483"})}),"\n",(0,i.jsx)(n.p,{children:"A Chromeless UI gives you complete control over your full UI and UX,\nbut it also means that you responsible for implementing your full UI and UX.\nAchieving this feat requires you to have an adequate grasp on the video player architecture and its underlying API."}),"\n",(0,i.jsx)(n.p,{children:"The goal of this guide is to advance your understanding on how to connect the dots between custom components and the THEOplayer API.\nFor example, this guide will explain to which THEOplayer APIs you could map your custom play button."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["Tip: go to our Chromeless UI samples for Web, ",(0,i.jsx)(n.a,{href:"https://github.com/THEOplayer/samples-ios-sdk/tree/master/Custom-UI",children:"iOS"}),", ",(0,i.jsx)(n.a,{href:"https://github.com/THEOplayer/samples-android-sdk/tree/master/Custom-UI",children:"Android"})," and ",(0,i.jsx)(n.a,{href:"https://github.com/THEOplayer/samples-roku-sdk/tree/master/basic-playback-app/components/ChromelessView",children:"Roku"})," on Github\nif you want to go straight to completed code samples."]})}),"\n",(0,i.jsx)(n.p,{children:"You can create a Chromeless UI on all THEOplayer SDKs."}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-chromeless-player-instance",children:"Creating a Chromeless player instance"}),"\n",(0,i.jsxs)(n.p,{children:["The article will often mention ",(0,i.jsx)(n.code,{children:"player"})," variable.\nThis ",(0,i.jsx)(n.code,{children:"player"}),' variable is a "Chromeless" instance created through the THEOplayer constructor.']}),"\n",(0,i.jsx)(n.h4,{id:"web-sdk",children:"Web SDK"}),"\n",(0,i.jsxs)(n.p,{children:["The API reference on creating a Chromeless player instance for the THEOplayer Web SDK is located at ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/classes/ChromelessPlayer.html#constructor",children:"ChromelessPlayer"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["When you're implementing a Chromeless UI, you don't need to include the THEOplayer CSS library (i.e. ",(0,i.jsx)(n.code,{children:"ui.css"}),") mentioned in our ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/getting-started/sdks/web/getting-started",children:"getting started guide"}),",\nnor do you need to specify some default CSS classed."]}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, instead of including ",(0,i.jsx)(n.code,{children:"THEOplayer.js"})," as mentioned in our ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/getting-started/sdks/web/getting-started",children:"getting started guide"}),",\nyou'll include ",(0,i.jsx)(n.code,{children:"THEOplayer.chromeless.js"}),", as demonstrated by the snippet below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<script type="text/javascript" src="/path/to/THEOplayer.chromeless.js"><\/script>\n'})}),"\n",(0,i.jsx)(n.p,{children:"The snippet below demonstrates how you set up a Chromeless player instance through the THEOplayer Web SDK API."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"var element = document.querySelector('.theoplayer-container');\nvar player = new THEOplayer.ChromelessPlayer(element, {\n  libraryLocation: '/path/to/your-theoplayer-folder/',\n  license: 'your_license_string',\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Notice how this snippet uses ",(0,i.jsx)(n.code,{children:"ChromelessPlayer"})," instead of ",(0,i.jsx)(n.code,{children:"Player"}),".\nThe ",(0,i.jsx)(n.code,{children:"element"})," variable refers to an existing DOM element.\nIf we modified our template in the ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/getting-started/sdks/web/getting-started",children:"getting started guide"})," to be Chromeless,\nit would resemble the code below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <title>THEOplayer Chromeless</title>\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n  </head>\n  <body>\n    <div class="theoplayer-container"></div>\n    <script type="text/javascript" src="/path/to/THEOplayer.chromeless.js"><\/script>\n    <script>\n      var element = document.querySelector(\'.theoplayer-container\');\n      var player = new THEOplayer.ChromelessPlayer(element, {\n        libraryLocation: \'/path/to/your-theoplayer-folder/\',\n        license: \'your_license_string\',\n      });\n      player.source = {\n        sources: [\n          {\n            src: \'//cdn.theoplayer.com/video/star_wars_episode_vii-the_force_awakens_official_comic-con_2015_reel_(2015)/index.m3u8\',\n            type: \'application/x-mpegurl\',\n          },\n        ],\n      };\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Of course, you would still need to apply CSS to style your ",(0,i.jsx)(n.code,{children:"theoplayer-container"}),", and give it a width and height."]}),"\n",(0,i.jsx)(n.h5,{id:"legacy-android-sdk-412x",children:"Legacy Android SDK (4.12.x)"}),"\n",(0,i.jsxs)(n.p,{children:["The API reference on creating a Chromeless player instance for the THEOplayer Android SDK is located at ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/THEOplayerView.html",children:"THEOplayerView"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["When creating an instance, you need to provide a ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/THEOplayerConfig.html",children:(0,i.jsx)(n.code,{children:"THEOplayerConfig"})}),",\nand set ",(0,i.jsx)(n.code,{children:"chromeless"})," to ",(0,i.jsx)(n.code,{children:"true"}),". The snippet below demonstrates how to create a Chromeless instance."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'THEOplayerConfig config = new THEOplayerConfig.Builder()\n        .chromeless(true)\n        .license("your_license_string")\n        .build();\nTHEOplayerView theoplayerView = new THEOplayerView(this, config);\nPlayer player = theoplayerView.getPlayer();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If you are creating your ",(0,i.jsx)(n.code,{children:"THEOplayerView"})," through XML,\nthen you can specify ",(0,i.jsx)(n.code,{children:'app:chromeless="true"'})," as implemented at ",(0,i.jsx)(n.a,{href:"https://github.com/THEOplayer/samples-android-sdk/blob/master/Custom-UI/app/src/main/res/layout/activity_player.xml",children:"https://github.com/THEOplayer/samples-android-sdk/blob/master/Custom-UI/app/src/main/res/layout/activity_player.xml"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"iostvos-sdk-and-legacy-iostvos-sdk-412x",children:"iOS/tvOS SDK and Legacy iOS/tvOS SDK (4.12.x)"}),"\n",(0,i.jsxs)(n.p,{children:["The API reference on creating a Chromeless player instance for the THEOplayer iOS SDK is located at ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html",children:"THEOplayer"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["When creating an instance, you need to ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayerConfiguration.html",children:(0,i.jsx)(n.code,{children:"THEOplayerConfig"})}),",\nand set ",(0,i.jsx)(n.code,{children:"chromeless"})," to ",(0,i.jsx)(n.code,{children:"true"}),". The snippet below demonstrates how to create a Chromeless instance."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:'let config = THEOplayerConfiguration(\n    chromeless: true,\n    pip: nil,\n    license: "your_license_string"\n)\nlet player = THEOplayer(configuration: config)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"using-a-webview-in-legacy-androidios-sdks-412x",children:"Using a WebView in legacy Android/iOS SDKs (4.12.x)"}),"\n",(0,i.jsxs)(n.p,{children:["As mentioned in our ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/ui/introduction#ios-and-android-sdk",children:"introduction"}),", the legacy Android and iOS SDKs (4.12.x) use a WebView for their default UI.\nYou may leverage this existing WebView to create a custom Chromeless UI for our Android and iOS SDK through a combination of JavaScript, CSS and HTML."]}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v4/how-to-guides/ui/how-to-build-chromeless-ui#using-a-webview",children:"our version 4 documentation"})," for more information."]}),"\n",(0,i.jsx)(n.h2,{id:"tracking-transitions-between-states",children:"Tracking transitions between states"}),"\n",(0,i.jsxs)(n.p,{children:["Refer to the article on ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/player/how-to-track-player-states",children:'"How to track player states"'})," to advance your understanding\non video player states. Understanding the video player lifecycle is a vital part of building a Chromeless UI."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Video Player States",src:t(14089).Z+"",title:"Video Player States",width:"878",height:"884"})}),"\n",(0,i.jsx)(n.p,{children:"This article explains how to track the start of a video and its end, but also how to detect buffering, errors and much more.\nYou'll need to implement (some of) these transitions in your Chromeless UI in order to render the appropriate components."}),"\n",(0,i.jsx)(n.h2,{id:"mapping-components",children:"Mapping components"}),"\n",(0,i.jsx)(n.p,{children:'A video player UI can be dissected into different components (or controls).\nA component offers context, and it may also offer an action. The "play button" is an example of an action component,\nbut the "current time text" (X in the screenshot below) is a context component.'}),"\n",(0,i.jsx)(n.p,{children:"As a developer, you should understand which controls are out there, and which video player APIs are relevant."}),"\n",(0,i.jsx)(n.p,{children:"This section addresses the following components:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Play button"}),"\n",(0,i.jsx)(n.li,{children:"Pause button"}),"\n",(0,i.jsx)(n.li,{children:"Volume mute button"}),"\n",(0,i.jsx)(n.li,{children:"Volume change button"}),"\n",(0,i.jsx)(n.li,{children:"Current time text"}),"\n",(0,i.jsx)(n.li,{children:"Duration text"}),"\n",(0,i.jsx)(n.li,{children:"Scrub bar"}),"\n",(0,i.jsx)(n.li,{children:"Buffered blocks"}),"\n",(0,i.jsx)(n.li,{children:"Live button"}),"\n",(0,i.jsx)(n.li,{children:"Audio change component"}),"\n",(0,i.jsx)(n.li,{children:"Subtitle change component"}),"\n",(0,i.jsx)(n.li,{children:"Video quality change component"}),"\n",(0,i.jsx)(n.li,{children:"Fullscreen and inline button"}),"\n",(0,i.jsx)(n.li,{children:"Picture-in-picture button"}),"\n",(0,i.jsx)(n.li,{children:"Chromecast button"}),"\n",(0,i.jsx)(n.li,{children:"AirPlay button"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Additionally, we'll discuss the following overlays:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Subtitle cues"}),"\n",(0,i.jsx)(n.li,{children:"Advertisement metadata"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Chromeless UI Layout",src:t(44665).Z+"",title:"Chromeless UI Layout",width:"1043",height:"589"})}),"\n",(0,i.jsx)(n.p,{children:"Instead of providing inline code on this article, we'll refer to other articles as much as possible,\nbecause linking the THEOplayer API to your custom components is an application of many of the existing how-to guides\nfor a specific use-case."}),"\n",(0,i.jsxs)(n.p,{children:["If you know how to navigate our API references, you don't even need this section.\nThe graphic below (originally referenced in ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/analytics/custom-analytics-integration",children:'"custom analytics integration"'}),") gives\na basic overview of many of the relevant interfaces and events."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"THEOplayer API Interfaces and Events",src:t(52878).Z+"",title:"THEOplayer API Interfaces and Events",width:"768",height:"713"})}),"\n",(0,i.jsx)(n.h3,{id:"play-button",children:"Play button"}),"\n",(0,i.jsxs)(n.p,{children:["You should show your play button when you are in a paused state, as described in ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/player/how-to-track-player-states",children:'"how to track player states"'}),".\nIf a viewer clicks your play button, you should call the ",(0,i.jsx)(n.code,{children:"play()"})," on your ",(0,i.jsx)(n.code,{children:"player"})," instance as documented across our\n",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/classes/ChromelessPlayer.html#play",children:"Web"}),", ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/player/Player.html#play--",children:"Android"})," and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html#/c:@M@THEOplayerSDK@objc(cs)THEOplayer(im)play",children:"iOS"})," documentation."]}),"\n",(0,i.jsx)(n.h3,{id:"pause-button",children:"Pause button"}),"\n",(0,i.jsxs)(n.p,{children:["You should show your pause button when you are in a playing state, as described in ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/player/how-to-track-player-states",children:'"how to track player states"'}),".\nIf a viewer clicks your pause button, you should call the ",(0,i.jsx)(n.code,{children:"pause()"})," on your ",(0,i.jsx)(n.code,{children:"player"})," instance as documented across our\n",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/classes/ChromelessPlayer.html#pause",children:"Web"}),", ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/player/Player.html#pause--",children:"Android"})," and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html#/c:@M@THEOplayerSDK@objc(cs)THEOplayer(im)pause",children:"iOS"})," documentation."]}),"\n",(0,i.jsx)(n.h3,{id:"volume-mute-button",children:"Volume mute button"}),"\n",(0,i.jsxs)(n.p,{children:["You can check whether your volume is muted through the ",(0,i.jsx)(n.code,{children:"muted"})," property (or method) on your ",(0,i.jsx)(n.code,{children:"player"})," instance as documented across\nour ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/classes/ChromelessPlayer.html#muted",children:"Web"}),", Android (",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/player/Player.html#isMuted--",children:"isMuted()"})," and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/player/Player.html#setMuted-boolean-",children:"setMuted()"}),") and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html#/s:13THEOplayerSDK0A0C5mutedSbvp",children:"iOS"})," documentation.\nYou should consider showing a different button depending on whether ",(0,i.jsx)(n.code,{children:"muted"})," returns ",(0,i.jsx)(n.code,{children:"true"})," or ",(0,i.jsx)(n.code,{children:"false"}),".\nIf a viewer clicks your mute button, you should set ",(0,i.jsx)(n.code,{children:"muted"})," to ",(0,i.jsx)(n.code,{children:"!muted"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"volume-change-button",children:"Volume change button"}),"\n",(0,i.jsxs)(n.p,{children:["You can get and set your volume level through the ",(0,i.jsx)(n.code,{children:"volume"})," property (or method) on your ",(0,i.jsx)(n.code,{children:"player"})," instance as documented across\nour ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/classes/ChromelessPlayer.html#volume",children:"Web"}),", Android (",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/player/Player.html#getVolume--",children:"getVolume()"})," and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/player/Player.html#setVolume-double-",children:"setVolume()"}),") and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html#/s:13THEOplayerSDK0A0C6volumeSfvp",children:"iOS"})," documentation.\nYou should consider showing a different button depending on the volume level."]}),"\n",(0,i.jsx)(n.p,{children:"Note that you cannot control the volume level on iOS- and Android-based SDKs as this is delegated to the hardware buttons.\nYou can only toggle the muted state on these SDKs."}),"\n",(0,i.jsx)(n.h3,{id:"current-time-text",children:"Current time text"}),"\n",(0,i.jsxs)(n.p,{children:["You can get the current time through the ",(0,i.jsx)(n.code,{children:"currentTime"})," property (or method) on your ",(0,i.jsx)(n.code,{children:"player"})," instance as documented across\nour ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/classes/ChromelessPlayer.html#currentTime",children:"Web"}),", Android (",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/player/Player.html#requestCurrentTime-com.theoplayer.android.api.player.RequestCallback-",children:"requestCurrentTime()"})," and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/player/Player.html#setCurrentTime-double-",children:"setCurrentTime()"}),")\nand iOS (",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html#/s:13THEOplayerSDK0A0C18requestCurrentTime17completionHandleryySdSg_s5Error_pSgtc_tF",children:"requestCurrentTime()"})," and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html#/s:13THEOplayerSDK0A0C14setCurrentTime_17completionHandlerySd_yypSg_s5Error_pSgtcSgtF",children:"setCurrentTime()"}),") documentation."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that ",(0,i.jsx)(n.code,{children:"currentTime"})," returns a relative value in seconds.\nIf you are dealing with live streams, you might want to use ",(0,i.jsx)(n.code,{children:"currentProgramDateTime"})," instead, as this returns an absolute value like ",(0,i.jsx)(n.code,{children:'"2022-04-01T13:37:42.666Z"'}),".\nThis property (or method) is especially useful when implementing an ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Electronic_program_guide",children:"EPG"})," experience."]}),"\n",(0,i.jsx)(n.h3,{id:"duration-text",children:"Duration text"}),"\n",(0,i.jsxs)(n.p,{children:["You can get the duration of a stream through the ",(0,i.jsx)(n.code,{children:"duration"})," property (or method) on your ",(0,i.jsx)(n.code,{children:"player"})," instance as documented across our\n",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/classes/ChromelessPlayer.html#duration",children:"Web"}),", ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/player/Player.html#getDuration--",children:"Android"})," and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html#/s:13THEOplayerSDK0A0C8durationSdSgvp",children:"iOS"})," documentation."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"duration"})," will return the duration in seconds for VOD streams, and ",(0,i.jsx)(n.code,{children:"Infinity"})," for live streams."]}),"\n",(0,i.jsxs)(n.p,{children:["You can calculate the remaining duration by subtracting the ",(0,i.jsx)(n.code,{children:"currentTime"})," from the ",(0,i.jsx)(n.code,{children:"duration"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"scrub-bar",children:"Scrub bar"}),"\n",(0,i.jsxs)(n.p,{children:['Related to the subsection on "Current time text",\nyou can seek to a different playhead position through the ',(0,i.jsx)(n.code,{children:"currentTime"})," property (or ",(0,i.jsx)(n.code,{children:"setCurrentTime()"})," method) on your ",(0,i.jsx)(n.code,{children:"player"})," instance.\nAlternatively, for live streams, you may also use ",(0,i.jsx)(n.code,{children:"currentProgramDateTime"})," to seek to absolute playhead positions."]}),"\n",(0,i.jsxs)(n.p,{children:["You can only seek to a playhead position that is within any of the time ranges of your ",(0,i.jsx)(n.code,{children:"seekable"})," property (or method) of your ",(0,i.jsx)(n.code,{children:"player"})," instance as documented across our\n",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/classes/ChromelessPlayer.html#seekable",children:"Web"}),",\n",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/player/Player.html#requestSeekable-com.theoplayer.android.api.player.RequestCallback-",children:"Android"})," and\n",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html#/s:13THEOplayerSDK0A0C15requestSeekable17completionHandleryySayAA9TimeRangeCGSg_s5Error_pSgtc_tF",children:"iOS"})," documentation.\nFor example, on the Web SDK, this means that you'll stay between ",(0,i.jsx)(n.code,{children:"player.seekable.start(0)"})," and ",(0,i.jsx)(n.code,{children:"player.seekable.end(player.seekable.length-1)"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You subscribe to the ",(0,i.jsx)(n.code,{children:"timeupdate"})," event to periodically update your scrub bar bullet.\nThis event is dispatched every ~200ms during playback.\nRefer to our ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/interfaces/PlayerEventMap.html#timeupdate",children:"Web"}),", ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/event/player/PlayerEventTypes.html#TIMEUPDATE",children:"Android"})," and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Structs/PlayerEventTypes.html#/s:13THEOplayerSDK16PlayerEventTypesV11TIME_UPDATEAA0D4TypeCyAA010TimeUpdateD0CGvpZ",children:"iOS"})," documentation for more info on this event."]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"seek"})," event is dispatched when you set a new value for ",(0,i.jsx)(n.code,{children:"currentTime"})," or ",(0,i.jsx)(n.code,{children:"currentProgramDateTime"}),".\nA ",(0,i.jsx)(n.code,{children:"seeked"})," event is dispatched when the seek was successful.\nRefer to our ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/interfaces/PlayerEventMap.html#seeking",children:"Web"}),", ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/event/player/PlayerEventTypes.html#SEEKING",children:"Android"})," and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Structs/PlayerEventTypes.html#/s:13THEOplayerSDK16PlayerEventTypesV7SEEKINGAA0D4TypeCyAA07SeekingD0CGvpZ",children:"iOS"}),' documentation for more info on these events.\nYou should consider displaying a "stalling icon" between these two events.']}),"\n",(0,i.jsx)(n.h4,{id:"buffered-blocks",children:"Buffered blocks"}),"\n",(0,i.jsx)(n.p,{children:"You may also want to annotate parts of the scrub bar that have already been buffered.\nWhen the viewer seeks to a buffered block playback immediately starts."}),"\n",(0,i.jsxs)(n.p,{children:["You can track information on what's being buffered through the ",(0,i.jsx)(n.code,{children:"progress"})," event.\nRefer to our ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/interfaces/PlayerEventMap.html#progress",children:"Web"}),", ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/event/player/PlayerEventTypes.html#PROGRESS",children:"Android"})," and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Structs/PlayerEventTypes.html#/s:13THEOplayerSDK16PlayerEventTypesV8PROGRESSAA0D4TypeCyAA08ProgressD0CGvpZ",children:"iOS"})," documentation for more info on this event.\nIn the callback of the ",(0,i.jsx)(n.code,{children:"progress"})," event,\nyou will want to query the ",(0,i.jsx)(n.code,{children:"buffered"})," property (or method) to iterate through the available buffered time ranges.\nThe ",(0,i.jsx)(n.code,{children:"buffered"})," property (or method) is described in our ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/classes/ChromelessPlayer.html#buffered",children:"Web"}),",\n",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/player/Player.html#requestBuffered-com.theoplayer.android.api.player.RequestCallback-",children:"Android"})," and ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html#/s:13THEOplayerSDK0A0C15requestBuffered17completionHandleryySayAA9TimeRangeCGSg_s5Error_pSgtc_tF",children:"iOS"})," documentation."]}),"\n",(0,i.jsx)(n.h3,{id:"live-button",children:"Live button"}),"\n",(0,i.jsxs)(n.p,{children:["A stream is a live stream when your ",(0,i.jsx)(n.code,{children:"duration"})," property (or method) returns ",(0,i.jsx)(n.code,{children:"Infinity"}),'.\nIf you want to implement a button that takes you to the "most live point" when clicked,\nthen you set ',(0,i.jsx)(n.code,{children:"currentTime"})," to the maximum ",(0,i.jsx)(n.code,{children:"seekable"})," ",(0,i.jsx)(n.code,{children:"end"})," time.\nFor example, on the Web SDK, you would call ",(0,i.jsx)(n.code,{children:"player.currentTime = player.seekable.end(player.seekable.length-1)"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"audio-change-component",children:"Audio change component"}),"\n",(0,i.jsxs)(n.p,{children:["Refer to the article on ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/mediatrack/how-to-detect-audio-tracks",children:'"how to detect audio tracks"'}),"\nto know how to detect the available audio tracks. You'll need this article to know which audio tracks are part of your stream."]}),"\n",(0,i.jsxs)(n.p,{children:["Refer to the article on ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/mediatrack/how-to-enable-disable-audio-tracks",children:'"how to enable and disable audio tracks"'}),"\nto know how to enable or disable another audio track. You'll need this article to enable another audio track."]}),"\n",(0,i.jsxs)(n.p,{children:["Refer to the article on ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/mediatrack/how-to-detect-audio-track-changes",children:'"how to detect audio track changes"'}),"\nto know how to detect when an audio track has been enabled or disabled. You'll need this article to correctly annotate your UI."]}),"\n",(0,i.jsx)(n.h3,{id:"subtitle-change-component",children:"Subtitle change component"}),"\n",(0,i.jsxs)(n.p,{children:["Refer to the article on ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/texttrack/how-to-programmatically-detect-text-tracks",children:'"how to detect text tracks"'}),"\nto know how to detect the available text tracks. You'll need this article to know which subtitles and closed captions are part of your stream."]}),"\n",(0,i.jsxs)(n.p,{children:["Refer to the article on ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/texttrack/how-to-programmatically-disable-text-tracks",children:'"how to enable and disable text tracks"'}),"\nto know how to enable or disable another text track."]}),"\n",(0,i.jsxs)(n.p,{children:["Refer to the article on ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/texttrack/how-to-detect-text-track-changes",children:'"how to detect text track changes"'}),"\nto know how to detect when a text track has been enabled or disabled. You'll need this article to correctly annotate your UI."]}),"\n",(0,i.jsx)(n.h3,{id:"video-quality-change-component",children:"Video quality change component"}),"\n",(0,i.jsxs)(n.p,{children:["Refer to the article on ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/mediatrack/how-to-detect-video-track-qualities",children:'"how to detect video track qualities"'}),"\nto know how to detect the available video track qualities. You'll need this article to know which video qualities are part of your stream."]}),"\n",(0,i.jsxs)(n.p,{children:["Refer to the article on ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/mediatrack/how-to-select-video-track-quality",children:'"how to select video track quality"'}),"\nto know how to enable another video track quality."]}),"\n",(0,i.jsxs)(n.p,{children:["Refer to the article on ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/mediatrack/how-to-detect-video-track-quality-changes",children:'"how to detect video track quality changes"'}),"\nto know how to detect when a specific video track quality has become active. You'll need this article to correctly annotate your UI."]}),"\n",(0,i.jsx)(n.h3,{id:"fullscreen-and-inline-button",children:"Fullscreen and inline button"}),"\n",(0,i.jsx)(n.p,{children:"Getting your video player in and out fullscreen requires some getting used to, and differs a bit across SDKs."}),"\n",(0,i.jsx)(n.h4,{id:"web-sdk-1",children:"Web SDK"}),"\n",(0,i.jsxs)(n.p,{children:["You cannot use our ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/web/interfaces/Presentation.html",children:(0,i.jsx)(n.code,{children:"Presentation API"})})," to switch between fullscreen, inline and picture-in-picture.\nInstead, you need to implement your own fullscreen handling."]}),"\n",(0,i.jsxs)(n.p,{children:["One approach to achieve this is by using the ",(0,i.jsx)(n.code,{children:"Fullscreen API"})," as described at ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API",children:"https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API"}),".\nAdditionally, to deal with iOS browsers, you can leverage ",(0,i.jsx)(n.a,{href:"https://developer.apple.com/documentation/webkitjs/htmlvideoelement/1633500-webkitenterfullscreen",children:(0,i.jsx)(n.code,{children:"webkitEnterFullscreen()"})}),",\nor resize your video player container to a 100% width and height."]}),"\n",(0,i.jsx)(n.h4,{id:"android-sdk",children:"Android SDK"}),"\n",(0,i.jsxs)(n.p,{children:["You cannot use our ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/android/com/theoplayer/android/api/fullscreen/FullScreenManager.html",children:"'FullscreenManager API`"})," to switch between\nfullscreen and inline.\nInstead, you need to implement your own fullscreen handling, as well as any associated orientation changes."]}),"\n",(0,i.jsxs)(n.p,{children:["Refer to ",(0,i.jsx)(n.a,{href:"https://developer.android.com/training/system-ui/immersive",children:"https://developer.android.com/training/system-ui/immersive"})," for more information on implementing your own fullscreen handling."]}),"\n",(0,i.jsx)(n.h4,{id:"iostvos-sdk-and-legacy-iostvos-sdk-412x-1",children:"iOS/tvOS SDK and Legacy iOS/tvOS SDK (4.12.x)"}),"\n",(0,i.jsxs)(n.p,{children:["You may use the ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html#/s:13THEOplayerSDK0A0C16presentationModeAA012PresentationD0Ovp",children:(0,i.jsx)(n.code,{children:"presentationMode"})})," property of the ",(0,i.jsx)(n.code,{children:"player"})," instance, as demonstrated in the snippet below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",children:"if (player.presentationMode == PresentationMode.fullscreen) {\n    player.presentationMode = PresentationMode.inline\n} else {\n    player.presentationMode = PresentationMode.fullscreen\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You may also use ",(0,i.jsx)(n.a,{href:"pathname:///theoplayer/v6/api-reference/ios/Classes/THEOplayer.html#/s:13THEOplayerSDK0A0C29fullscreenOrientationCouplingSbvp",children:(0,i.jsx)(n.code,{children:"fullscreenOrientationCoupling"})}),"\nto automatically enter fullscreen when the viewer goes into landscape mode."]}),"\n",(0,i.jsxs)(n.p,{children:["Forcing the video player to rotate into landscape when you hit the fullscreen button in portrait mode is something\nthat you need to implement on top of THEOplayer. (For example through a combination of ",(0,i.jsx)(n.a,{href:"https://developer.apple.com/documentation/uikit/uidevice",children:(0,i.jsx)(n.code,{children:"UIDevice"})})," and ",(0,i.jsx)(n.a,{href:"https://developer.apple.com/documentation/uikit/uiinterfaceorientation",children:(0,i.jsx)(n.code,{children:"UIInterfaceOrientation"})}),".)"]}),"\n",(0,i.jsxs)(n.p,{children:["Do note that when you leverage our ",(0,i.jsx)(n.code,{children:"presentationMode"})," you must add your custom components as subviews of the ",(0,i.jsx)(n.code,{children:"THEOplayerView"}),",\nbecause your components won't remain visible otherwise.\nIn other words, you'll have to identify the appropriate subview X of the view Y to which you have (indirectly) added your ",(0,i.jsx)(n.code,{children:"player"})," instance as a subview X.\n(You do this by querying the subviews of view Y.)"]}),"\n",(0,i.jsx)(n.p,{children:"You may also implement fullscreen management on top of THEOplayer.\nThis is worth considering if you want more control and flexibility."}),"\n",(0,i.jsx)(n.h3,{id:"picture-in-picture-button",children:"Picture-in-picture button"}),"\n",(0,i.jsxs)(n.p,{children:['You should implement your Picture-in-Picture UI and UX independently of THEOplayer,\nregardless of whether you\'re considering "in-app" picture-in-picture or "out-of-app" picture-in-picture.\nThe ',(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/miscellaneous/picture-in-picture",children:"THEOplayer Picture-in-Picture API"})," is not available for Chromeless players."]}),"\n",(0,i.jsxs)(n.p,{children:["To get the active video element on the THEOplayer Web SDK you may query ",(0,i.jsx)(n.code,{children:"player.element.querySelectorAll('video[src]')[0]"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Related resources:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developers.google.com/web/updates/2017/09/picture-in-picture",children:"https://developers.google.com/web/updates/2017/09/picture-in-picture"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.apple.com/documentation/webkitjs/adding_picture_in_picture_to_your_safari_media_controls",children:"https://developer.apple.com/documentation/webkitjs/adding_picture_in_picture_to_your_safari_media_controls"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.android.com/guide/topics/ui/picture-in-picture",children:"https://developer.android.com/guide/topics/ui/picture-in-picture"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.apple.com/documentation/avkit/adopting_picture_in_picture_in_a_custom_player",children:"https://developer.apple.com/documentation/avkit/adopting_picture_in_picture_in_a_custom_player"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Note that it might not be possible to implement out-of-app Picture-in-Picture on the THEOplayer iOS SDK."}),"\n",(0,i.jsx)(n.h3,{id:"chromecast-button",children:"Chromecast button"}),"\n",(0,i.jsxs)(n.p,{children:["Refer to our ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/cast/chromecast/introduction",children:"introduction on Chromecast"})," to know how to track the availability of Chromecast,\nand how to start and stop a Chromecast session."]}),"\n",(0,i.jsx)(n.h3,{id:"airplay-button",children:"AirPlay button"}),"\n",(0,i.jsxs)(n.p,{children:["Refer to our ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/cast/airplay/introduction",children:"introduction on AirPlay"})," to know how to track the availability of AirPlay,\nand how to start and stop an AirPlay session."]}),"\n",(0,i.jsx)(n.h3,{id:"subtitle-cues",children:"Subtitle cues"}),"\n",(0,i.jsxs)(n.p,{children:["You may still leverage THEOplayer's default rendering of subtitles (and closed captions) in your Chromeless UI.\nThis may require some extra styling though, depending on your SDK.\nFor example, on the Web SDK, you may have to set a default ",(0,i.jsx)(n.code,{children:"font-size"})," through CSS, as demonstrated in the snippet below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:".theoplayer-texttracks * {\n  font-size: 1em !important;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["So what's the alternative? Instead of using THEOplayer's default rendering,\nyou can programmatically detect when a subtitle (and closed captions) cue should appear and disappear,\nas explained in ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/texttrack/how-to-detect-active-text-track-cues",children:'"how to detect active text track cues"'}),".\nYou could insert the cue when it should appear, and remove it when it should disappear.\nThis alternative makes you fully responsible for the rendering and styling, and gives you total control over it."]}),"\n",(0,i.jsx)(n.h3,{id:"advertisement-metadata",children:"Advertisement metadata"}),"\n",(0,i.jsx)(n.p,{children:"When playing back advertisements, you might want to overlay a countdown, show a skip button after some seconds,\ninsert ad markers in the scrub bar, and achieve other use cases."}),"\n",(0,i.jsxs)(n.p,{children:["If you use ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/ads/google-ima",children:"Google IMA"})," for client-side ad-insertion,\nthen this integration might already take care of some default UI customization."]}),"\n",(0,i.jsxs)(n.p,{children:["If you are using THEOplayer's ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/ads/how-to-set-up-vast-and-vmap",children:"default ad integration"})," for client-side ad-insertion,\nthen you need to ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/ads/how-to-subscribe-to-ad-events",children:"subscribe to the appropriate ad events"}),",\nand apply your UI and UX in the callbacks of these events."]}),"\n",(0,i.jsx)(n.p,{children:"Similarly, if you're doing server-side ad-insertion, you also need to apply your UI and UX in the callbacks of your ad events."}),"\n",(0,i.jsx)(n.h2,{id:"sample-code",children:"Sample code"}),"\n",(0,i.jsx)(n.p,{children:"The following subsections help you get started on our SDKs."}),"\n",(0,i.jsx)(n.h3,{id:"web-sdk-2",children:"Web SDK"}),"\n",(0,i.jsxs)(n.p,{children:["The sample code at ",(0,i.jsx)(n.a,{href:"https://jsfiddle.net/thijsl/1xbk9csq/1/",children:"https://jsfiddle.net/thijsl/1xbk9csq/1/"})," may help you get bootstrapped on our Web SDK.\n(Note that this sample code doesn't necessarily demonstrate best practices.)"]}),"\n",(0,i.jsx)("iframe",{className:"boxShadow_RhNG",width:"100%",height:"400",src:"//jsfiddle.net/thijsl/1xbk9csq/5/embedded/html,result/",allowFullScreen:!0,allow:"autoplay;fullscreen;encrypted-media;gyroscope;picture-in-picture;accelerometer",frameBorder:"0"}),"\n",(0,i.jsx)(n.h3,{id:"android-sdk-1",children:"Android SDK"}),"\n",(0,i.jsxs)(n.p,{children:["The Github project at ",(0,i.jsx)(n.a,{href:"https://github.com/THEOplayer/samples-android-sdk/tree/master/Custom-UI",children:"https://github.com/THEOplayer/samples-android-sdk/tree/master/Custom-UI"}),"\nprovides a basic implementation of a Chromeless UI on the Android SDK."]}),"\n",(0,i.jsx)(n.h3,{id:"iostvos-sdk-and-legacy-iostvos-sdk-412x-2",children:"iOS/tvOS SDK and Legacy iOS/tvOS SDK (4.12.x)"}),"\n",(0,i.jsxs)(n.p,{children:["The Github project at ",(0,i.jsx)(n.a,{href:"https://github.com/THEOplayer/samples-ios-sdk/tree/master/Custom-UI",children:"https://github.com/THEOplayer/samples-ios-sdk/tree/master/Custom-UI"}),"\nprovides a basic implementation of a Chromeless UI on the iOS SDK."]}),"\n",(0,i.jsx)(n.h3,{id:"roku-sdk",children:"Roku SDK"}),"\n",(0,i.jsxs)(n.p,{children:["The github project at ",(0,i.jsx)(n.a,{href:"https://github.com/THEOplayer/samples-roku-sdk/tree/master/basic-playback-app/components/ChromelessView",children:"https://github.com/THEOplayer/samples-roku-sdk/tree/master/basic-playback-app/components/ChromelessView"}),"\nprovides a basic implementation of a Chromeless UI on the Roku SDK."]}),"\n",(0,i.jsx)(n.h2,{id:"ux-enhancements",children:"UX Enhancements"}),"\n",(0,i.jsx)(n.p,{children:"You can make your user-experience more appealing through various enhancements.\nFor example, when the player is out of video data and is waiting for additional content you could show a 'loading' indication."}),"\n",(0,i.jsx)(n.p,{children:"Below are some common UX enhancements to consider:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Loading spinner: provide an indication when no video data is available."}),"\n",(0,i.jsx)(n.li,{children:"Poster: show a poster (thumbnail) before initial play-request, and when the video is complete."}),"\n",(0,i.jsx)(n.li,{children:"Auto next: when approaching the end, render a clickable overlay that allows the viewer to navigate to the next stream.\nAutomatically play this stream when the current stream ends."}),"\n",(0,i.jsx)(n.li,{children:"Skip intro: render a clickable button to skip the (ongoing) intro."}),"\n",(0,i.jsx)(n.li,{children:"Ad countdown: overlay the remaining time of the ongoing ad break."}),"\n",(0,i.jsx)(n.li,{children:"Ad markers: indicate the position of ad breaks in the scrub bar."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error handling"}),"\n",(0,i.jsxs)(n.p,{children:["A UI should also be capable of handling errors and informing the viewer.\nRefer to our ",(0,i.jsx)(n.a,{href:"/documentation/pr-preview/pr-216/theoplayer/v6/how-to-guides/miscellaneous/error/introduction",children:"introduction on errors"})," to further explore this topic."]}),"\n",(0,i.jsx)(n.h2,{id:"roku-sdk-1",children:"Roku SDK"}),"\n",(0,i.jsx)(n.p,{children:"This subsection gets you started on implementing a Chromeless UI on our Roku SDK."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#display-chromeless-player",children:"Display Chromeless player"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#control-bar-play-pause-stop-buttons",children:"Control bar and Buttons"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#control-bar-switch-audio-or-text-tracks",children:"Switch Audio or Text Tracks"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This section will give you an overview on how custom controls can be integrated with THEOplayer API and also a brief introduction to BrightScript and SceneGraph.\nWe will create play, pause, stop buttons, add audio and text tracks management menu and create a simple timeline."}),"\n",(0,i.jsx)(n.h3,{id:"display-chromeless-player",children:"Display chromeless player"}),"\n",(0,i.jsx)(n.p,{children:"To display the video in chromeless THEOplayer we have to take a few steps:"}),"\n",(0,i.jsx)(n.p,{children:"Include and add the instance of THEOplayer."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'  <THEOsdk:THEOplayer id="TestPlayer" controls="false"/>\n'})}),"\n",(0,i.jsx)(n.p,{children:'Set the "controls" attribute to "false" to hide all default controls.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-brightscript",children:'function Init()\n    m.player = m.top.findNode("TestPlayer")\n    m.player.configuration = {\n      "license": "" \' put the THEOplayer license between apostrophes\n    }\n    \' we can go chromeless both via XML or Brightscript\'\n    \' m.player.controls = false\nend function\n'})}),"\n",(0,i.jsx)(n.p,{children:'To set the player source, you can create the following function and then just call it inside the "init" function.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-brightscript",children:'function setSource()\n    sourceDescription = {\n        "sources": [\n            {\n                "src": "http://cdn.theoplayer.com/video/star_wars_episode_vii-the_force_awakens_official_comic-con_2015_reel_(2015)/index.m3u8",\n                "type": "application/x-mpegURL"\n            }\n        ]\n    }\n    m.player.source = sourceDescription\n    m.player.source.Live = false\n    m.player.source.LiveBoundsPauseBehavior = "pause"\nend function\n'})}),"\n",(0,i.jsx)(n.p,{children:'To make sure that the player will be displayed in a proper position you can set a destination rectangle. In our example we will display the video in a rectangle (1600x800) positioned in the middle of the screen using the "setDestinationRectangle" THEOplayer method.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-brightscript",children:'function setupPlayerPosition()\n    uiRes = m.top.getScene().currentDesignResolution\n    m.uiRes = uiRes\n    playerRect = {\n        width: 1600,\n        height: 800,\n        x: (m.uiRes.width - 1600) / 2,\n        y: (m.uiRes.height - 800) / 2\n    }\n    m.player.callFunc("setDestinationRectangle", playerRect)\nend function\n'})}),"\n",(0,i.jsx)(n.p,{children:'When all is set up, all we have to do is to play the video using the "play" method.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-brightscript",children:'m.player.callFunc("play")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'Notice: The "play" method call is mandatory, otherwise the video playback won\u2019t start and users won\u2019t be able to use remote controls.'})}),"\n",(0,i.jsx)(n.p,{children:'Below you can see the whole working example. The BrightScript code in this snippet is added inside the component xml file, but you can easily extract the logic part to separate ".brs" file by using "script" tag with a specified "uri" field.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8" ?>\n<component name="TestScene" extends="Scene">\n    <interface>\n\n    </interface>\n\n    <script type = "text/brightscript" >\n\n        <![CDATA[\n\n        function Init()\n            m.player = m.top.findNode("TestPlayer")\n            m.player.configuration = {\n              "license": "" \' put the THEOplayer license between apostrophes\n            }\n            \' we can go chromeless both via XML or Brightscript\'\n            \' m.player.controls = false\n\n            m.player.callFunc("setMaxVideoResolution", 1920, 1080)\n            setupPlayerPosition()\n            setSource()\n            m.top.setFocus(true)\n            m.player.callFunc("play")\n        end function\n\n        function setSource()\n            sourceDescription = {\n                "sources": [\n                    {\n                        "src": "http://cdn.theoplayer.com/video/star_wars_episode_vii-the_force_awakens_official_comic-con_2015_reel_(2015)/index.m3u8",\n                        "type": "application/x-mpegURL"\n                    }\n                ]\n            }\n            m.player.source = sourceDescription\n            m.player.source.Live = false\n            m.player.source.LiveBoundsPauseBehavior = "pause"\n        end function\n\n        function setupPlayerPosition()\n            uiRes = m.top.getScene().currentDesignResolution\n            m.uiRes = uiRes\n            playerRect = {\n                width: 1600,\n                height: 800,\n                x: (m.uiRes.width - 1600) / 2,\n                y: (m.uiRes.height - 800) / 2\n            }\n            m.player.callFunc("setDestinationRectangle", playerRect)\n        end function\n\n        ]]>\n\n    <\/script>\n\n    <children>\n	    <THEOsdk:THEOplayer id="TestPlayer" controls="false"/>\n    </children>\n</component>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"control-bar-play-pause-stop-buttons",children:"Control bar Play, Pause, Stop buttons"}),"\n",(0,i.jsx)(n.p,{children:"To create a control bar with play, pause and stop buttons, generally we would need to create custom UI elements (buttons) and call the api methods when they are played. To accomplish that we have to take the following steps:"}),"\n",(0,i.jsx)(n.p,{children:"Let's start with creating the UI elements which are simply xml elements. We will add three buttons (play, pause and stop), along with timeline bar."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Group id="playerOverlay">\n	<Group id="GroupOptions">\n		<Rectangle id="OptionsBackground" color="0x000000FF" height="47" width="10" opacity="0.5"/>\n		<Rectangle id="TimelineBackground" height="3" width="0" opacity="0.3"/>\n		<Rectangle id="TimelineProgress" height="3" width="0" color="0xFFC713FF"/>\n\n		<ButtonGroup id="ButtonGroupOptions" layoutDirection="horiz">\n			<Button id="ButtonPlay" iconUri="" focusBitmapUri="pkg:/images/focusBG.png" focusedIconUri="" maxWidth="115" minWidth="115" height="95" opacity="0.9" scale="[0.5,0.5]">\n				<Poster width="75" height="65" id="playIcon" uri="pkg:/images/play.png" translation="[20,15]" opacity="0.9"/>\n			</Button>\n			<Button id="ButtonPause" iconUri="" focusBitmapUri="pkg:/images/focusBG.png" focusedIconUri="" maxWidth="115" minWidth="115" height="95" opacity="0.9" scale="[0.5,0.5]">\n				<Poster width="75" height="65" id="pauseIcon" uri="pkg:/images/pause.png" translation="[20,15]" opacity="0.9"/>\n			</Button>\n			<Button id="ButtonStop" iconUri="" focusBitmapUri="pkg:/images/focusBG.png" focusedIconUri="" maxWidth="115" minWidth="115" height="95" opacity="0.9" scale="[0.5,0.5]">\n				<Poster id="stopIcon" uri="pkg:/images/stop.png" width="75" height="65" translation="[20,15]" opacity="0.9"/>\n			</Button>\n		</ButtonGroup>\n	</Group>\n</Group>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Next step would be adding callback on buttons press. To do so, we will use ",(0,i.jsx)(n.a,{href:"https://developer.roku.com/en-gb/docs/developer-program/core-concepts/handling-application-events.md#handling-node-field-value-changes",children:"roku native observe mechanism"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-brightscript",children:'function Init()\n	m.player = m.top.findNode("TestPlayer")\n	m.player.configuration = {\n      "license": "" \' put the THEOplayer license between apostrophes\n    }\n	m.buttonPlay = m.top.findNode("ButtonPlay")\n	m.buttonPause = m.top.findNode("ButtonPause")\n	m.buttonStop = m.top.findNode("ButtonStop")\n\n	setupPlayerPosition()\n	setupControlsPosition()\n	setSource()\n\n	m.buttonPlay.setFocus(true)\n\n	m.buttonPlay.observeField("buttonSelected", "OnEventPlay")\n	m.buttonPause.observeField("buttonSelected", "OnEventPause")\n	m.buttonStop.observeField("buttonSelected", "OnEventStop")\n\nend function\n\nfunction OnEventPlay()\n\nend function\n\nfunction OnEventPause()\n\nend function\n\nfunction OnEventStop()\n\nend function\n'})}),"\n",(0,i.jsx)(n.p,{children:"The next step would be calling the THEOplayer api methods inside our callback. To do so, we will modify the callbacks:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-brightscript",children:'function OnEventPlay()\n	if m.player.source = Invalid\n		setSource()\n	end if\n	m.player.callFunc("play")\nend function\n\nfunction OnEventPause()\n	m.player.callFunc("pause")\nend function\n\nfunction OnEventStop()\n	m.player.source = Invalid\nend function\n'})}),"\n",(0,i.jsx)(n.p,{children:'Last thing left to do is to make the timeline work. We will add an event listener to an event "timeUpdate". This listener will allow us to react to every time update, so we can draw the current progress in playing video.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8" ?>\n<component name="TestScene" extends="Scene">\n    <interface>\n\n        <function name="callbackOnEventPlayerTimeupdate"/>\n\n    </interface>\n\n    <script type = "text/brightscript" >\n\n        <![CDATA[\n\n        function Init()\n            m.player = m.top.findNode("TestPlayer")\n            m.player.configuration = {\n              "license": "" \' put the THEOplayer license between apostrophes\n            }\n            m.buttonPlay = m.top.findNode("ButtonPlay")\n            m.buttonPause = m.top.findNode("ButtonPause")\n            m.buttonStop = m.top.findNode("ButtonStop")\n\n            m.player.callFunc("setMaxVideoResolution", 1920, 1080)\n            setupPlayerPosition()\n            setupControlsPosition()\n\n            setSource()\n            m.buttonPlay.setFocus(true)\n\n            m.buttonPlay.observeField("buttonSelected", "OnEventPlay")\n            m.buttonPause.observeField("buttonSelected", "OnEventPause")\n            m.buttonStop.observeField("buttonSelected", "OnEventStop")\n\n            m.player.listener = m.top\n            m.player.callFunc("addEventListener", m.player.Event.c, "callbackOnEventPlayerTimeupdate")\n        end function\n\n        function setSource()\n            sourceDescription = {\n                "sources": [\n                    {\n                        "src": "http://cdn.theoplayer.com/video/star_wars_episode_vii-the_force_awakens_official_comic-con_2015_reel_(2015)/index.m3u8",\n                        "type": "hls"\n                    }\n                ]\n            }\n            m.player.source = sourceDescription\n            m.player.source.Live = false\n            m.player.source.LiveBoundsPauseBehavior = "pause"\n        end function\n\n        function setupPlayerPosition()\n            uiRes = m.top.getScene().currentDesignResolution\n            m.uiRes = uiRes\n            playerRect = {\n                width: 1600,\n                height: 800,\n                x: (m.uiRes.width - 1600) / 2,\n                y: (m.uiRes.height - 800) / 2\n            }\n            m.player.callFunc("setDestinationRectangle", playerRect)\n        end function\n\n        function setupControlsPosition()\n            buttons = [m.buttonPlay, m.buttonPause, m.buttonStop]\n            buttonsWidth = 0\n\n            for each button in buttons\n                \' get rid of focus footprint on the buttons\n                button.removeChildIndex(1)\n\n                \' -20 because of buttons ovelaping and scale\n                buttonsWidth += button.minWidth - 20\n            end for\n\n            uiRes = m.top.getScene().currentDesignResolution\n            playerRect = m.player.boundingRect()\n            playerBottomX = playerRect.width + playerRect.x\n            playerBottomY = playerRect.height + playerRect.y\n            m.groupOptions = m.top.findNode("GroupOptions")\n            m.buttonGroupOptions = m.top.findNode("ButtonGroupOptions")\n            m.groupOptionsVisible = true\n            buttonGroupOptionsRect = m.buttonGroupOptions.boundingRect()\n            centerY = playerRect.y + playerRect.height - buttonGroupOptionsRect.height\n            centerX = playerRect.x\n            m.groupOptions.translation = [centerX, centerY]\n            centerX = (playerRect.width - buttonsWidth / 2) / 2\n            m.buttonGroupOptions.translation = [centerX, 3]\n\n            m.optionsBackground = m.top.findNode("OptionsBackground")\n            m.optionsBackground.width = playerRect.width\n            m.timelineBackground = m.top.findNode("TimelineBackground")\n            m.timelineBackground.width = playerRect.width\n\n            m.timelineProgress = m.top.findNode("TimelineProgress")\n            m.timelineProgress.width = 1\n        end function\n\n        function callbackOnEventPlayerTimeupdate(eventData)\n            \'update movie timeline bar\n            if m.player.duration > 0 and m.player.currentTime < m.player.duration\n                rect = m.player.boundingRect()\n                m.timelineProgress.width = rect.width * ( m.player.currentTime / m.player.duration )\n            end if\n        end function\n\n        function OnEventPlay()\n            if m.player.source = Invalid\n                setSource()\n            end if\n\n            m.player.callFunc("play")\n        end function\n\n        function OnEventPause()\n            m.player.callFunc("pause")\n        end function\n\n        function OnEventStop()\n            m.player.source = Invalid\n        end function\n\n        ]]>\n\n    <\/script>\n\n    <children>\n	    <THEOsdk:THEOplayer id="TestPlayer" controls="false"/>\n\n        <Group id="playerOverlay">\n            <Group id="GroupOptions">\n                <Rectangle id="OptionsBackground" color="0x000000FF" height="47" width="10" opacity="0.5"/>\n                <Rectangle id="TimelineBackground" height="3" width="0" opacity="0.3"/>\n                <Rectangle id="TimelineProgress" height="3" width="0" color="0xFFC713FF"/>\n\n                <ButtonGroup id="ButtonGroupOptions" layoutDirection="horiz">\n                    <Button id="ButtonPlay" iconUri="" focusBitmapUri="pkg:/images/focusBG.png" focusedIconUri="" maxWidth="115" minWidth="115" height="95" opacity="0.9" scale="[0.5,0.5]">\n\n                        <Poster width="75" height="65" id="playIcon" uri="pkg:/images/play.png" translation="[20,15]" opacity="0.9"/>\n                    </Button>\n                    <Button id="ButtonPause" iconUri="" focusBitmapUri="pkg:/images/focusBG.png" focusedIconUri="" maxWidth="115" minWidth="115" height="95" opacity="0.9" scale="[0.5,0.5]">\n\n                        <Poster width="75" height="65" id="pauseIcon" uri="pkg:/images/pause.png" translation="[20,15]" opacity="0.9"/>\n                    </Button>\n                    <Button id="ButtonStop" iconUri="" focusBitmapUri="pkg:/images/focusBG.png" focusedIconUri="" maxWidth="115" minWidth="115" height="95" opacity="0.9" scale="[0.5,0.5]">\n\n                        <Poster id="stopIcon" uri="pkg:/images/stop.png" width="75" height="65" translation="[20,15]" opacity="0.9"/>\n                    </Button>\n                </ButtonGroup>\n\n            </Group>\n        </Group>\n    </children>\n</component>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"control-bar-switch-audio-or-text-tracks",children:"Control bar Switch audio or text tracks"}),"\n",(0,i.jsx)(n.p,{children:"Now, let\u2019s add an audio or text track management menu. In this portion, we will use a fresh SceneGraph component (RadioButtonList). We will use other callbacks, API methods and attributes. The main steps which we have to take to accomplish the desired outcome are:"}),"\n",(0,i.jsx)(n.p,{children:"Create an empty RadioButtonList component:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<RadioButtonList\n    id="ButtonGroupCategoryFirst"\n    opacity="1"\n    focusBitmapUri="pkg:/images/focusBG.png"\n    focusedColor="0xFFFFFFFF"\n    color="0xFFFFFFFF"\n    itemSize="[300,65]"\n    translation="[0,65]">\n</RadioButtonList>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Add the content to our list. To do so, we will observe audio tracks and assign the audio tracks list to a previously created radio button list."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-brightscript",children:'function onEventAudioTracksChanged()\n    list = createObject("roSGNode","ContentNode")\n    option = list.createChild("ContentNode")\n    option.title = "default"\n    option.description = "default"\n    option.id = ""\n    checkedItem = 0\n    index = 1\n    for each track in m.player.audioTracks\n        option = list.createChild("ContentNode")\n        option.title = track.label\n        option.description = track.language\n        option.id = track.id\n        if track.enabled then\n            checkedItem = index\n        end if\n        index +=1\n    end for\n\n    optionsCount = 0\n    if Type(m.buttonGroupCategorySecond.content) <> "roInvalid" then\n        optionsCount = m.buttonGroupCategorySecond.content.count()\n    end if\n    if list.count() <> optionsCount then\n        m.buttonGroupCategorySecond.content = list\n        m.buttonGroupCategorySecond.checkedItem = checkedItem\n        setAudioMenuPosition()\n    end if\nend function\n'})}),"\n",(0,i.jsx)(n.p,{children:"The next step would be managing a focus of the remote."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-brightscript",children:"function OnKeyEvent(key, press) as Boolean\n    handled = false\n    showOptions()\n    if press\n        if key = \"options\"\n        else if m.player.visible = true and key = \"back\"\n            ' Settings Menu opened\n            if m.settingsOptions.visible = true\n                hideSettings()\n                handled = true\n            ' category 1 Menu opened\n            else if m.categoryFirstOptions.visible = true then\n                hideCategoryFirst()\n                handled = true\n            ' category 2 Menu opened\n            else if m.categorySecondOptions.visible = true then\n                hideCategorySecond()\n                handled = true\n            else\n                m.player.source = Invalid\n            end if\n        else if key = \"up\"\n            if m.settingsOptions.visible = true and m.buttonCategoryFirst.hasFocus() = true\n                hideSettings()\n                handled = true\n            ' category 1 Menu opened\n            ' else if m.categoryFirstOptions.visible = true and m.buttonGroupCategoryFirst.hasFocus() = true then\n            '     hideCategoryFirst()\n            '     handled = true\n            ' category 2 Menu opened\n            else if m.categorySecondOptions.visible = true and m.categorySecondButtonFirst.hasFocus() = true then\n                hideCategorySecond()\n                handled = true\n            end if\n        end if\n    end if\n\n    return handled\nend function\n"})}),"\n",(0,i.jsx)(n.p,{children:"In order to allow the user to change audio tracks, we have to prepare a function which will change audio track."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-brightscript",children:"function setAudioTrack(label as String)\n    audioTracks =  m.player.audioTracks\n    for i =  audioTracks.count() - 1 to 0 step -1\n        if audioTracks[i].label = label then\n            audioTracks[i].enabled = true\n        else\n            audioTracks[i].enabled = false\n        end if\n    end for\n    'required because roku deep-copied roAssociativeArray through fields (pass-by-value)\n    'read more : <https://developer.roku.com/en-gb/docs/developer-program/performance-guide/optimization-techniques.md#OptimizationTechniques-DataFlow>\n    m.player.audioTracks = audioTracks\nend function\n\nfunction OnEventCategorySecondSelectedItem()\n    if m.player.instance <> Invalid\n        itemIndex = m.buttonGroupCategorySecond.checkedItem\n        item = m.buttonGroupCategorySecond.content.getChild(itemIndex)\n        setAudioTrack(item.title)\n    end if\nend function\n"})}),"\n",(0,i.jsx)(n.p,{children:"To complete this functionality, we will add an observer to the radio button list and call the setAudioTrack function."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-brightscript",children:"function OnEventCategoryFirstSelectedItem()\n    if m.player.instance <> Invalid\n        itemIndex = m.buttonGroupCategoryFirst.checkedItem\n        item = m.buttonGroupCategoryFirst.content.getChild(itemIndex)\n        setCaptionsLanguage(item.description)\n    end if\nend function\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can find the whole example below. This example contains two menus which allow users to manipulate audio and text tracks."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8" ?>\n\n<component name="TestScene" extends="Scene">\n\n    <interface>\n\n        <function name="callbackOnEventPlayerTimeupdate"/>\n\n    </interface>\n\n    <script type="text/brightscript">\n        <![CDATA[\n\n        function Init()\n            SetupUI()\n            SetupObservers()\n            SetupEventListeners()\n        end function\n\n        function SetupUI()\n            m.buttonPlay = m.top.findNode("ButtonPlay")\n            m.buttonPause = m.top.findNode("ButtonPause")\n            m.buttonStop = m.top.findNode("ButtonStop")\n            m.buttonSettings = m.top.findNode("ButtonSettings")\n            m.categoryFirstHeaderBackground = m.top.findNode("CategoryFirstHeaderBackground")\n            m.settingsOptions = m.top.findNode("SettingsOptions")\n            m.buttonCategoryFirst = m.top.findNode("ButtonCategoryFirst")\n            m.buttonCategorySecond = m.top.findNode("ButtonCategorySecond")\n            m.categoryFirstButtonFirst = m.top.findNode("CategoryFirstButtonFirst")\n            m.categorySecondButtonFirst = m.top.findNode("CategorySecondButtonFirst")\n\n            m.player = m.top.findNode("TestPlayer")\n            m.player.configuration = {\n              "license": "" \' put the THEOplayer license between apostrophes\n            }\n            SetupPlayerPosition()\n            SetControlsPosition()\n\n            setSource()\n            m.buttonPlay.setFocus(true)\n        end function\n\n        function SetupObservers()\n            m.player.observeField("audioTracks","onEventAudioTracksChanged")\n            m.player.observeField("textTracks","onEventTextTracksChanged")\n\n            m.buttonPlay.observeField("buttonSelected", "OnEventPlay")\n            m.buttonPause.observeField("buttonSelected", "OnEventPause")\n            m.buttonStop.observeField("buttonSelected", "OnEventStop")\n            m.buttonSettings.observeField("buttonSelected", "OnEventSettings")\n\n            m.buttonCategoryFirst.observeField("buttonSelected", "OnEventCategoryFirst")\n            m.buttonGroupCategoryFirst.observeField("itemFocused", "OnEventCategoryFirstFocusedItem")\n            m.buttonGroupCategoryFirst.observeField("checkedItem", "OnEventCategoryFirstSelectedItem")\n\n            m.buttonCategorySecond.observeField("buttonSelected", "OnEventCategorySecond")\n            m.buttonGroupCategorySecond.observeField("itemFocused", "OnEventCategorySecondFocusedItem")\n            m.buttonGroupCategorySecond.observeField("checkedItem", "OnEventCategorySecondSelectedItem")\n        end function\n\n        function SetupEventListeners()\n            m.player.listener = m.top\n            m.player.callFunc("addEventListener", m.player.Event.timeupdate, "callbackOnEventPlayerTimeupdate")\n        end function\n\n        function SetupPlayerPosition()\n            m.uiRes = m.top.getScene().currentDesignResolution\n            m.timelineProgress = m.top.findNode("TimelineProgress")\n            m.timelineProgress.width = 1\n            \'m.player.callFunc("setMaxVideoResolution", m.uiRes.width, m.uiRes.height)\n            \' center video\'\n            \'playerRect = {\n            \'\'    width: m.uiRes.width,\n            \'\'    height: m.uiRes.height,\n            \'\'    x: 0,\n            \'\'    y: 0\n            \'\'}\n            \'m.player.callFunc("setDestinationRectangle", playerRect)\n        end function\n\n        function SetControlsPosition()\n            buttons = [m.buttonPlay, m.buttonPause, m.buttonStop, m.buttonSettings]\n            buttonsWidth = 0\n\n            for each button in buttons\n                \' get rid of focus footprint on the buttons\n                button.removeChildIndex(1)\n\n                \' -20 because of buttons ovelaping and scale\n                buttonsWidth += button.minWidth - 20\n            end for\n            playerRect = m.player.boundingRect()\n            playerBottomX = playerRect.width + playerRect.x\n            playerBottomY = playerRect.height + playerRect.y\n            m.groupOptions = m.top.findNode("GroupOptions")\n            m.buttonGroupOptions = m.top.findNode("ButtonGroupOptions")\n            m.groupOptionsVisible = true\n            buttonGroupOptionsRect = m.buttonGroupOptions.boundingRect()\n            centerY = playerRect.y + playerRect.height - buttonGroupOptionsRect.height\n            centerX = playerRect.x\n            m.groupOptions.translation = [centerX, centerY]\n            centerX = (playerRect.width - buttonsWidth / 2) / 2\n            m.buttonGroupOptions.translation = [centerX, 3]\n\n            m.optionsBackground = m.top.findNode("OptionsBackground")\n            m.optionsBackground.width = playerRect.width\n            m.timelineBackground = m.top.findNode("TimelineBackground")\n            m.timelineBackground.width = playerRect.width\n\n            m.settingsOptions = m.top.findNode("SettingsOptions")\n            m.buttonGroupSettings = m.top.findNode("ButtonGroupSettings")\n            settingsRect = m.settingsOptions.boundingRect()\n            buttonGroupSettingsRect = m.buttonGroupSettings.boundingRect()\n            groupOptionsRect = m.groupOptions.boundingRect()\n            centerX = playerBottomX - buttonGroupSettingsRect.x - settingsRect.width - 20\n            centerY = playerBottomY - buttonGroupSettingsRect.y - settingsRect.height - 20\n            m.settingsOptions.translation = [centerX, centerY ]\n\n\n            m.categoryFirstOptions = m.top.findNode("CategoryFirstOptions")\n            m.categoryFirstBackground = m.top.findNode("CategoryFirstBackground")\n            m.buttonGroupCategoryFirst = m.top.findNode("ButtonGroupCategoryFirst")\n            SetClosedCaptionsMenuPosition()\n\n            m.categorySecondOptions = m.top.findNode("CategorySecondOptions")\n            m.categorySecondBackground = m.top.findNode("CategorySecondBackground")\n            m.buttonGroupCategorySecond = m.top.findNode("ButtonGroupCategorySecond")\n            SetAudioMenuPosition()\n        end function\n\n        function SetClosedCaptionsMenuPosition()\n            playerRect = m.player.boundingRect()\n            playerBottomX = playerRect.width + playerRect.x\n            playerBottomY = playerRect.height + playerRect.y\n            categoryFirstRect = m.categoryFirstOptions.boundingRect()\n            categoryFirstButtonGroupRect = m.buttonGroupCategoryFirst.boundingRect()\n            centerX = playerBottomX - categoryFirstButtonGroupRect.x - categoryFirstRect.width - 20\n            centerY = playerBottomY - categoryFirstButtonGroupRect.y - categoryFirstRect.height - m.categoryFirstHeaderBackground.height - 20\n            m.categoryFirstOptions.translation = [centerX, centerY]\n            m.categoryFirstBackground.height = categoryFirstRect.height + 30 \' added 30 because radio group shows separator\n            if playerRect.x = 0 or playerRect.y = 0 or playerRect.width = m.uiRes.width or playerRect.height = m.uiRes.height then\n                m.fullScreen = true\n                if m.player.textTracks.count() > 0\n                    m.buttonCategoryFirst.textColor = "0xFFFFFFFF"\n                    m.buttonCategoryFirst.focusedTextColor = "0xFFFFFFFF"\n                else\n                    m.buttonCategoryFirst.textColor = "0x666666FF"\n                    m.buttonCategoryFirst.focusedTextColor = "0x666666FF"\n                end if\n            else\n                m.fullScreen = false\n                m.buttonCategoryFirst.textColor = "0x666666FF"\n                m.buttonCategoryFirst.focusedTextColor = "0x666666FF"\n            end if\n        end function\n\n        function SetAudioMenuPosition()\n            playerRect = m.player.boundingRect()\n            playerBottomX = playerRect.width + playerRect.x\n            playerBottomY = playerRect.height + playerRect.y\n            categorySecondOptionsRect = m.categorySecondOptions.boundingRect()\n            categorySecondButtonGroupRect = m.buttonGroupCategorySecond.boundingRect()\n            centerX = playerBottomX - categorySecondButtonGroupRect.x - categorySecondOptionsRect.width - 20\n            centerY = playerBottomY - categorySecondButtonGroupRect.y - categorySecondOptionsRect.height - 20\n            m.categorySecondOptions.translation = [centerX, centerY]\n            m.categorySecondBackground.height = categorySecondOptionsRect.height\n            isNode = Type(m.buttonGroupCategorySecond.content) = "roSGNode"\n            if isNode then\n                m.buttonCategorySecond.textColor = "0xFFFFFFFF"\n                m.buttonCategorySecond.focusedTextColor = "0xFFFFFFFF"\n            else\n                m.buttonCategorySecond.textColor = "0x666666FF"\n                m.buttonCategorySecond.focusedTextColor = "0x666666FF"\n            end if\n        end function\n\n        function callbackOnEventPlayerTimeupdate(eventData)\n            ? "Event <timeupdate>: "; eventData\n\n            \'update movie timeline bar\n            if m.player.duration > 0 and m.player.currentTime < m.player.duration\n                rect = m.player.boundingRect()\n                m.timelineProgress.width = rect.width * ( m.player.currentTime / m.player.duration )\n            end if\n        end function\n\n        function setSource()\n            sourceDescription = {\n                "poster": ""\n                "sources": [\n                    {\n                        "src": "http://cdn.theoplayer.com/video/elephants-dream/playlist.m3u8",\n                        "type": "application/x-mpegURL"\n                    }\n                ]\n            }\n            m.player.source = sourceDescription\n            m.player.source.Live = m.live\n            m.player.source.LiveBoundsPauseBehavior = "pause"\n        end function\n\n        function OnEventPlay()\n            if m.player.source = Invalid\n                setSource()\n            end if\n\n            m.player.callFunc("play")\n        end function\n\n        function hideOptions()\n            if m.groupOptionsVisible = true\n                m.groupOptionsVisible = false\n                hideCategoryFirst()\n                hideCategorySecond()\n                hideSettings()\n            end if\n        end function\n\n        function showOptions()\n            if m.groupOptionsVisible = false\n                m.groupOptionsVisible = true\n            end if\n        end function\n\n        function showCategoryFirst()\n            hideSettings()\n            m.categoryFirstOptions.visible = true\n            m.buttonGroupCategoryFirst.setFocus(true)\n        end function\n\n        function hideCategoryFirst()\n            if  m.categoryFirstOptions.visible = true\n                m.categoryFirstOptions.visible = false\n                showSettings()\n            end if\n        end function\n\n        function showCategorySecond()\n            hideSettings()\n            m.categoryFirstOptions.visible = true\n            m.categorySecondButtonFirst.setFocus(true)\n        end function\n\n        function hideCategorySecond()\n            if m.categorySecondOptions.visible = true\n                m.categorySecondOptions.visible = false\n                showSettings()\n            end if\n        end function\n\n        function showSettings()\n            m.settingsOptions.visible = true\n            m.buttonCategoryFirst.setFocus(true)\n        end function\n\n        function hideSettings()\n            if m.settingsOptions.visible = true\n                m.settingsOptions.visible = false\n                m.buttonSettings.setFocus(true)\n            end if\n        end function\n\n        function OnEventPause()\n            m.player.callFunc("pause")\n        end function\n\n        function OnEventStop()\n            m.player.source = Invalid\n        end function\n\n        function OnEventCategoryFirst()\n            isNode = Type(m.buttonGroupCategoryFirst.content) = "roSGNode"\n            if isNode and m.fullScreen\n                m.settingsOptions.visible = false\n                m.categoryFirstOptions.visible = true\n                m.buttonGroupCategoryFirst.setFocus(true)\n            end if\n        end function\n\n        function OnEventCategorySecond()\n            isNode = Type(m.buttonGroupCategorySecond.content) = "roSGNode"\n            if isNode\n                m.settingsOptions.visible = false\n                m.categorySecondOptions.visible = true\n                m.buttonGroupCategorySecond.setFocus(true)\n            end if\n        end function\n\n        function onEventAudioTracksChanged()\n            list = createObject("roSGNode","ContentNode")\n            option = list.createChild("ContentNode")\n            option.title = "default"\n            option.description = "default"\n            option.id = ""\n            checkedItem = 0\n            index = 1\n            for each track in m.player.audioTracks\n                option = list.createChild("ContentNode")\n                option.title = track.label\n                option.description = track.language\n                option.id = track.id\n                if track.enabled then\n                    checkedItem = index\n                end if\n                index +=1\n            end for\n\n            optionsCount = 0\n            if Type(m.buttonGroupCategorySecond.content) <> "roInvalid" then\n                optionsCount = m.buttonGroupCategorySecond.content.count()\n            end if\n            if list.count() <> optionsCount then\n                m.buttonGroupCategorySecond.content = list\n                m.buttonGroupCategorySecond.checkedItem = checkedItem\n                setAudioMenuPosition()\n            end if\n        end function\n\n        function onEventTextTracksChanged()\n            list = createObject("roSGNode","ContentNode")\n            option = list.createChild("ContentNode")\n            option.title = "default"\n            option.description = "default"\n            option.id = ""\n            checkedItem = 0\n            index = 1\n            for each track in m.player.textTracks\n                if track.kind = "captions"\n                    option = list.createChild("ContentNode")\n                    option.title = track.label\n                    option.description = track.language\n                    option.id = track.id\n                    if track.mode = "showing" then\n                        checkedItem = index\n                    end if\n                    index +=1\n                end if\n            end for\n\n            optionsCount = 0\n            if Type(m.buttonGroupCategoryFirst.content) <> "roInvalid" then\n                optionsCount = m.buttonGroupCategoryFirst.content.count()\n            end if\n            if list.count() <> optionsCount then\n                m.buttonGroupCategoryFirst.content = list\n                m.buttonGroupCategoryFirst.checkedItem = checkedItem\n                setClosedCaptionsMenuPosition()\n            end if\n        end function\n\n        function OnEventSettings()\n            if m.settingsOptions.visible = false\n                m.settingsOptions.visible = true\n                m.buttonCategoryFirst.setFocus(true)\n            else\n                m.settingsOptions.visible = false\n            end if\n        end function\n\n        function OnEventCategoryFirstFocusedItem()\n            showOptions()\n        end function\n\n        function setCaptionsLanguage(language as String)\n            textTracks =  m.player.textTracks\n            for i =  textTracks.count() - 1 to 0 step -1\n                if textTracks[i].kind = "captions" and textTracks[i].language = language then\n                    if m.fullScreen then\n                        textTracks[i].mode = "showing"\n                    else\n                        textTracks[i].mode = "hidden"\n                    end if\n                else\n                    textTracks[i].mode = "disabled"\n                end if\n            end for\n            \'assigment of new roAssociativeArray is required because roku deep-copied roAssociativeArray through fields (pass-by-value)\n            \'read more : <https://developer.roku.com/en-gb/docs/developer-program/performance-guide/optimization-techniques.md#OptimizationTechniques-DataFlow>\n            m.player.textTracks = textTracks\n        end function\n\n        function OnEventCategoryFirstSelectedItem()\n            if m.player.instance <> Invalid\n                itemIndex = m.buttonGroupCategoryFirst.checkedItem\n                item = m.buttonGroupCategoryFirst.content.getChild(itemIndex)\n                setCaptionsLanguage(item.description)\n            end if\n        end function\n\n        function OnEventCategorySecondFocusedItem()\n            showOptions()\n        end function\n\n        function setAudioTrack(label as String)\n            audioTracks =  m.player.audioTracks\n            for i =  audioTracks.count() - 1 to 0 step -1\n                if audioTracks[i].label = label then\n                    audioTracks[i].enabled = true\n                else\n                    audioTracks[i].enabled = false\n                end if\n            end for\n            \'required because roku deep-copied roAssociativeArray through fields (pass-by-value)\n            \'read more : <https://developer.roku.com/en-gb/docs/developer-program/performance-guide/optimization-techniques.md#OptimizationTechniques-DataFlow>\n            m.player.audioTracks = audioTracks\n        end function\n\n        function OnEventCategorySecondSelectedItem()\n            if m.player.instance <> Invalid\n                itemIndex = m.buttonGroupCategorySecond.checkedItem\n                item = m.buttonGroupCategorySecond.content.getChild(itemIndex)\n                setAudioTrack(item.title)\n            end if\n        end function\n\n        function OnKeyEvent(key, press) as Boolean\n            handled = false\n            showOptions()\n            if press\n                if key = "options"\n                else if m.player.visible = true and key = "back"\n                    \' Settings Menu opened\n                    if m.settingsOptions.visible = true\n                        hideSettings()\n                        handled = true\n                    \' category 1 Menu opened\n                    else if m.categoryFirstOptions.visible = true then\n                        hideCategoryFirst()\n                        handled = true\n                    \' category 2 Menu opened\n                    else if m.categorySecondOptions.visible = true then\n                        hideCategorySecond()\n                        handled = true\n                    else\n                        m.player.source = Invalid\n                    end if\n                else if key = "up"\n                    if m.settingsOptions.visible = true and m.buttonCategoryFirst.hasFocus() = true\n                        hideSettings()\n                        handled = true\n                    \' category 1 Menu opened\n                    \' else if m.categoryFirstOptions.visible = true and m.buttonGroupCategoryFirst.hasFocus() = true then\n                    \'     hideCategoryFirst()\n                    \'     handled = true\n                    \' category 2 Menu opened\n                    else if m.categorySecondOptions.visible = true and m.categorySecondButtonFirst.hasFocus() = true then\n                        hideCategorySecond()\n                        handled = true\n                    end if\n                end if\n            end if\n\n            return handled\n        end function\n\n        ]]>\n    <\/script>\n    <children>\n	    <THEOsdk:THEOplayer id="TestPlayer" controls="false"/>\n\n        <Group id="playerOverlay">\n            <Group id="GroupOptions">\n                <Rectangle id="OptionsBackground" color="0x000000FF" height="47" width="10" opacity="0.5"/>\n                <Rectangle id="TimelineBackground" height="3" width="0" opacity="0.3"/>\n                <Rectangle id="TimelineProgress" height="3" width="0" color="0xFFC713FF"/>\n\n                <ButtonGroup id="ButtonGroupOptions" layoutDirection="horiz">\n                    <Button id="ButtonPlay" iconUri="" focusBitmapUri="pkg:/images/focusBG.png" focusedIconUri="" maxWidth="115" minWidth="115" height="95" opacity="0.9" scale="[0.5,0.5]">\n                        <Poster width="75" height="65" id="playIcon" uri="pkg:/images/play.png" translation="[20,15]" opacity="0.9"/>\n                    </Button>\n                    <Button id="ButtonPause" iconUri="" focusBitmapUri="pkg:/images/focusBG.png" focusedIconUri="" maxWidth="115" minWidth="115" height="95" opacity="0.9" scale="[0.5,0.5]">\n                        <Poster width="75" height="65" id="pauseIcon" uri="pkg:/images/pause.png" translation="[20,15]" opacity="0.9"/>\n                    </Button>\n                    <Button id="ButtonStop" iconUri="" focusBitmapUri="pkg:/images/focusBG.png" focusedIconUri="" maxWidth="115" minWidth="115" height="95" opacity="0.9" scale="[0.5,0.5]">\n                        <Poster id="stopIcon" uri="pkg:/images/stop.png" width="75" height="65" translation="[20,15]" opacity="0.9"/>\n                    </Button>\n                    <Button id="ButtonSettings" iconUri="" focusBitmapUri="pkg:/images/focusBG.png" focusedIconUri="" maxWidth="115" minWidth="115" height="95" opacity="0.9" scale="[0.5,0.5]">\n                        <Poster id="settingsIcon" uri="pkg:/images/settings.png" width="75" height="65" translation="[20,15]" opacity="0.9"/>\n                    </Button>\n                </ButtonGroup>\n\n            </Group>\n\n            <Group id="SettingsOptions" visible="false">\n                <Rectangle id="SettingsBackground" color="0x000000FF" width="500" height="215" translation="[-15,0]" opacity="0.5"/>\n                <Rectangle id="SettingsHeaderBackground" color="0xFFC713FF" width="500" height="65" translation="[-15,0]">\n                    <Label text="Settings" height="65" width="470" horizAlign="center" vertAlign="center" font="font:SmallestBoldSystemFont"/>\n                </Rectangle>\n\n                <ButtonGroup id="ButtonGroupSettings" layoutDirection="vert" vertAlignment="top" translation="[0,65]" opacity="1">\n                    <Button\n                        id="ButtonCategoryFirst"\n                        iconUri=""\n                        focusedIconUri=""\n                        focusBitmapUri="pkg:/images/focusBG.png"\n                        maxWidth="470"\n                        minWidth="470"\n                        height="65"\n                        opacity="0.9"\n                        text="Captions"\n                        focusedTextColor="0xFFFFFFFF"\n                        textFont="font:SmallestBoldSystemFont"\n                        focusedTextFont="font:SmallestBoldSystemFont"></Button>\n                    <Button\n                        id="ButtonCategorySecond"\n                        iconUri=""\n                        focusedIconUri=""\n                        focusBitmapUri="pkg:/images/focusBG.png"\n                        maxWidth="470"\n                        minWidth="470"\n                        height="65"\n                        opacity="0.9"\n                        text="Audio Tracks"\n                        focusedTextColor="0xFFFFFFFF"\n                        textFont="font:SmallestBoldSystemFont"\n                        focusedTextFont="font:SmallestBoldSystemFont"></Button>\n                </ButtonGroup>\n            </Group>\n\n            <Group id="CategoryFirstOptions" visible="false">\n                <Rectangle id="CategoryFirstBackground" color="0x000000FF" width="300" height="0" opacity="0.5"/>\n                <Rectangle id="CategoryFirstHeaderBackground" color="0xFFC713FF" width="300" height="65">\n                    <Label text="Captions" height="65" width="300" horizAlign="center" vertAlign="center" font="font:SmallestBoldSystemFont"/>\n                </Rectangle>\n\n                <RadioButtonList\n                    id="ButtonGroupCategoryFirst"\n                    opacity="1"\n                    focusBitmapUri="pkg:/images/focusBG.png"\n                    focusedColor="0xFFFFFFFF"\n                    color="0xFFFFFFFF"\n                    itemSize="[300,65]"\n                    translation="[0,65]">\n                </RadioButtonList>\n            </Group>\n            <Group id="CategorySecondOptions" visible="false">\n                <Rectangle id="CategorySecondBackground" color="0x000000FF" width="300" height="0" opacity="0.5"/>\n                <Rectangle id="CategorySecondHeaderBackground" color="0xFFC713FF" width="300" height="65">\n                    <Label text="Audio Tracks" height="65" width="300" vertAlign="center" horizAlign="center" font="font:SmallestBoldSystemFont"/>\n                </Rectangle>\n\n                <RadioButtonList\n                    id="ButtonGroupCategorySecond"\n                    opacity="1"\n                    focusBitmapUri="pkg:/images/focusBG.png"\n                    focusedColor="0xFFFFFFFF"\n                    color="0xFFFFFFFF"\n                    itemSize="[300,65]"\n                    translation="[0,65]">\n                </RadioButtonList>\n            </Group>\n        </Group>\n    </children>\n</component>\n'})})]})}function u(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},52878:function(e,n,t){t.d(n,{Z:function(){return o}});let o=t.p+"assets/images/analytics-events-a06c6157d95ff215a0e93e3d4a80667b.png"},56409:function(e,n,t){t.d(n,{Z:function(){return o}});let o=t.p+"assets/images/chromeless-ui-7-4025542f4b233096015b9e6ecce5bcd5.png"},44665:function(e,n,t){t.d(n,{Z:function(){return o}});let o=t.p+"assets/images/chromeless-ui-layout-3642d810cba7de946ee7cb69b7ab238b.png"},14089:function(e,n,t){t.d(n,{Z:function(){return o}});let o=t.p+"assets/images/player-video-player-states-4f4f37f92d4b03a2c750ce7fe03d0a5a.png"},50065:function(e,n,t){t.d(n,{Z:function(){return s},a:function(){return a}});var o=t(67294);let i={},r=o.createContext(i);function a(e){let n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);