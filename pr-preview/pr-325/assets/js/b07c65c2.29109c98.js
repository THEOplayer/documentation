"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["72870"],{250065:function(e,n,i){i.d(n,{Z:()=>l,a:()=>r});var s=i(667294);let t={},a=s.createContext(t);function r(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}},471356:function(e){e.exports=JSON.parse('{"id":"changelog/changelog-native-sdk","title":"Native SDK Changes","description":"Updates to the Native SDK for Android, iOS, macOS, Linux, and Windows applications.","source":"@site/millicast/changelog/changelog-native-sdk.md","sourceDirName":"changelog","slug":"/changelog/changelog-native-sdk","permalink":"/documentation/pr-preview/pr-325/millicast/changelog/changelog-native-sdk","draft":false,"unlisted":false,"editUrl":"https://github.com/THEOplayer/documentation/blob/-/millicast/changelog/changelog-native-sdk.md","tags":[],"version":"current","frontMatter":{},"sidebar":"millicastReleaseNotes","previous":{"title":"Dashboard Changes","permalink":"/documentation/pr-preview/pr-325/millicast/changelog/changelog-dolbyio-dashboard"},"next":{"title":"Web SDK","permalink":"/documentation/pr-preview/pr-325/millicast/changelog/changelog-web-platform"}}')},898479:function(e,n,i){i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var s=i(471356),t=i(785893),a=i(250065);let r={},l="Native SDK Changes",d={},c=[{value:"2024-08-21 | Native SDK 2.0.0",id:"2024-08-21--native-sdk-200",level:2},{value:"\uD83C\uDD95 Viewer and Track Management",id:"new-viewer-and-track-management",level:3},{value:"\uD83C\uDD95 Asynchronous Model",id:"new-asynchronous-model",level:3},{value:"\uD83C\uDD95 Playout Delay",id:"new-playout-delay",level:3},{value:"\uD83C\uDD92 Logging and Stats",id:"-logging-and-stats",level:3},{value:"Additional Updates",id:"additional-updates",level:3},{value:"2024-04-25 | Native SDK 1.8.4",id:"2024-04-25--native-sdk-184",level:2},{value:"Fixes",id:"fixes",level:4},{value:"2024-04-18 - 1.7.5 and 1.8.3",id:"2024-04-18---175-and-183",level:2},{value:"Fixes",id:"fixes-1",level:4},{value:"2024-04-12 - 1.8.2",id:"2024-04-12---182",level:2},{value:"Features",id:"features",level:4},{value:"Fixes",id:"fixes-2",level:4},{value:"2024-04-04 - 1.8.1",id:"2024-04-04---181",level:2},{value:"Fixes",id:"fixes-3",level:4},{value:"2024-03-20 - 1.8.0",id:"2024-03-20---180",level:2},{value:"Features",id:"features-1",level:4},{value:"Fixes",id:"fixes-4",level:4},{value:"Breaking changes",id:"breaking-changes",level:4},{value:"Android",id:"android",level:5},{value:"Apple platforms",id:"apple-platforms",level:5},{value:"2024-03-18 - 1.8.0-beta.1",id:"2024-03-18---180-beta1",level:2},{value:"Features",id:"features-2",level:4},{value:"Fixes",id:"fixes-5",level:4},{value:"Breaking changes",id:"breaking-changes-1",level:4},{value:"Android",id:"android-1",level:5},{value:"Apple platforms",id:"apple-platforms-1",level:5},{value:"2024-03-15 - 1.8.0-alpha.2",id:"2024-03-15---180-alpha2",level:2},{value:"Features",id:"features-3",level:4},{value:"Fixes",id:"fixes-6",level:4},{value:"Breaking changes",id:"breaking-changes-2",level:4},{value:"Android",id:"android-2",level:5},{value:"Objective C/Swift SDK",id:"objective-cswift-sdk",level:5},{value:"2024-03-14 - 1.8.0-alpha.1",id:"2024-03-14---180-alpha1",level:2},{value:"Features",id:"features-4",level:4},{value:"Fixes",id:"fixes-7",level:4},{value:"2024-03-14 - 1.7.4",id:"2024-03-14---174",level:2},{value:"Fixes",id:"fixes-8",level:4},{value:"2024-02-28 - 1.7.3",id:"2024-02-28---173",level:2},{value:"Fixes",id:"fixes-9",level:4},{value:"General",id:"general",level:5},{value:"Android",id:"android-3",level:5},{value:"2024-02-14 - 1.7.2",id:"2024-02-14---172",level:2},{value:"Fixes",id:"fixes-10",level:4},{value:"Changes",id:"changes",level:4},{value:"2024-02-09 - 1.7.1",id:"2024-02-09---171",level:2},{value:"Fixes",id:"fixes-11",level:4},{value:"2024-02-08 - 1.7.0",id:"2024-02-08---170",level:2},{value:"Features",id:"features-5",level:4},{value:"Fixes",id:"fixes-12",level:4},{value:"Changes",id:"changes-1",level:4},{value:"Breaking Changes",id:"breaking-changes-3",level:4},{value:"New signature of the on_layers event",id:"new-signature-of-the-on_layers-event",level:5},{value:"Modified values of the ViewerLayerData structure",id:"modified-values-of-the-viewerlayerdata-structure",level:5},{value:"Modified Kotlin implementation",id:"modified-kotlin-implementation",level:5},{value:"The auto reconnect property removal",id:"the-auto-reconnect-property-removal",level:5},{value:"2024-02-04 - 1.7.0-beta.1",id:"2024-02-04---170-beta1",level:2},{value:"Features",id:"features-6",level:4},{value:"Fixes",id:"fixes-13",level:4},{value:"Changes",id:"changes-2",level:4},{value:"Breaking Changes",id:"breaking-changes-4",level:4},{value:"New signature of the on_layers event",id:"new-signature-of-the-on_layers-event-1",level:5},{value:"Modified values of the ViewerLayerData structure",id:"modified-values-of-the-viewerlayerdata-structure-1",level:5},{value:"Modified Kotlin implementation",id:"modified-kotlin-implementation-1",level:5},{value:"Setting automatic reconnection",id:"setting-automatic-reconnection",level:5},{value:"2023-12-15 - 1.6.0",id:"2023-12-15---160",level:2},{value:"Features",id:"features-7",level:4},{value:"Fixes",id:"fixes-14",level:4},{value:"Deprecations",id:"deprecations",level:4},{value:"2023-09-28 - 1.5.2",id:"2023-09-28---152",level:2},{value:"Features",id:"features-8",level:4},{value:"Fixes",id:"fixes-15",level:4},{value:"2023-07-04 - 1.5.1",id:"2023-07-04---151",level:2},{value:"Features",id:"features-9",level:4},{value:"Fixes",id:"fixes-16",level:4},{value:"Known Issues",id:"known-issues",level:4},{value:"2023-03-16 - 1.5.0",id:"2023-03-16---150",level:2},{value:"Features",id:"features-10",level:4},{value:"Fixes",id:"fixes-17",level:4},{value:"2022-12-09 - 1.4.2",id:"2022-12-09---142",level:2},{value:"Deprecated APIs",id:"deprecated-apis",level:4},{value:"Fixes",id:"fixes-18",level:4}];function o(e){let n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"native-sdk-changes",children:"Native SDK Changes"})}),"\n",(0,t.jsxs)(n.p,{children:["Updates to the ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk",children:"Native SDK"})," for Android, iOS, macOS, Linux, and Windows applications."]}),"\n",(0,t.jsx)(n.admonition,{title:"Release History",type:"tip",children:(0,t.jsxs)(n.p,{children:["You can find the full history of previous releases with downloadable assets from the ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases",children:"millicast/millicast-native-sdk"})," repository."]})}),"\n",(0,t.jsxs)(n.h2,{id:"2024-08-21--native-sdk-200",children:["2024-08-21 | Native SDK ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v2.0.0",children:"2.0.0"})]}),"\n",(0,t.jsx)(n.p,{children:"We've made some major changes including updates that greatly improve the experience of using the SDK but are no longer backward compatible."}),"\n",(0,t.jsx)(n.p,{children:"To help transition your applications with these changes we've created migration guides that may be helpful:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/ios/sdk/sdk-migration-guide",children:"Migration Guide for iOS SDK"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/android/sdk/sdk-migration-guide",children:"Migration Guide for Android SDK"})}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"new-viewer-and-track-management",children:["\uD83C\uDD95"," Viewer and Track Management"]}),"\n",(0,t.jsxs)(n.p,{children:["Changing the APIs related to projecting sources on the subscriber. Now, subscribers",(0,t.jsx)(n.br,{}),"\n","do not need to manage WebRTC remote tracks, project sources and manage their state.",(0,t.jsx)(n.br,{}),"\n","Subscribers now receive a notion of a remote track, which can either be audio/video",(0,t.jsx)(n.br,{}),"\n","and manage their own state. These tracks can be enabled with a renderer/view, query",(0,t.jsx)(n.br,{}),"\n","the source they belong to, receive events such as Activity status (Inactive/Active),",(0,t.jsx)(n.br,{}),"\n","layers (for video), etc."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",metastring:'title="Kotlin/Android"',children:"subscriber.onRemoteTrack.collect { track ->\n    if (track is RemoteVideoTrack) {\n        track.enableAsync(videoSink);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-swift",metastring:'title="Swift/iOS"',children:"let subscriber = MCSubscriber()\n\n// iOS views now take renderers in the initializer instead of tracks directly. Keep\n// a reference to the renderer so that the renderer can be attached to tracks to receive media.\nlet renderer = MCAcceleratedVideoRenderer() // or MCCMSampleBufferVideoRenderer\n\nTask {\n  for await track in subscriber.rtsRemoteTrackAdded() {\n    // Only use one renderer per video track.\n    if let videoTrack = track.asVideo() {\n      try await videoTrack.enable(renderer:renderer)\n    }\n\n    if let audioTrack = track.asAudio() {\n      try await audioTrack.enable()\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"std::vector<millicast::EventConnectionPtr> handlers;\nhandlers.push_back(viewer->add_event_handler(\n      [](const millicast::Viewer::RtsTrackAdded& evt) {\n        if (evt.track.as_video()) {\n          evt.track.as_video()->enable(track_manager.add_renderer())\n                         .on_result([]() {});\n        } else {\n          evt.track.as_audio->enable().on_result([]() { });\n        }\n      }));\n"})}),"\n",(0,t.jsx)(n.p,{children:"To see these APIs in practice, refer to the subscriber sample app which is included in the package."}),"\n",(0,t.jsxs)(n.h3,{id:"new-asynchronous-model",children:["\uD83C\uDD95"," Asynchronous Model"]}),"\n",(0,t.jsx)(n.p,{children:"The synchronous APIs have been fully removed on the publisher and subscriber. You can see this in action from the updated Getting Started guides."}),"\n",(0,t.jsx)(n.p,{children:"Android / Kotlin"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/android/sdk/getting-started-with-subscribing",children:"Getting Started with Subscribing"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/android/sdk/getting-started-with-publishing",children:"Getting Started with Publishing"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"iOS / Swift"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/ios/sdk/getting-started-with-subscribing",children:"Getting Started with Subscribing"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/ios/sdk/getting-started-with-publishing",children:"Getting Started with Publishing"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Desktop"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/desktop/getting-started-with-subscribing",children:"Getting Started with Subscribing"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/desktop/getting-started-with-publishing",children:"Getting Started with Publishing"})}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"new-playout-delay",children:["\uD83C\uDD95"," Playout Delay"]}),"\n",(0,t.jsxs)(n.p,{children:["To better manage tradeoffs with latency and quality, you can use the ",(0,t.jsx)(n.code,{children:"ForcePlayoutDelay"})," to set a ",(0,t.jsx)(n.strong,{children:"min"})," and ",(0,t.jsx)(n.strong,{children:"max"})," buffer size."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"  /**\n   * @brief Structure describing playout delay to be enforced on the client.\n   * https://webrtc.googlesource.com/src/+/refs/heads/main/docs/native-code/rtp-hdrext/playout-delay\n   * Setting both of these values to 0,0 will ensure that there is no\n   * playout delay added.\n   */\n  struct ForcePlayoutDelay {\n    int min; /** The minimum playout delay desired. */\n    int max; /** The maximum playout delay desired. */\n  };\n\n  /**\n   * @brief The playout delay to enforce on the client side.\n   */\n  std::optional<ForcePlayoutDelay> force_playout_delay;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"-logging-and-stats",children:"\uD83C\uDD92 Logging and Stats"}),"\n",(0,t.jsx)(n.p,{children:"Improve logger so that when applications provide their own logging callback when using the set_logger function default logging to stderr will be disabled (unless force enabled by app):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"MILLICAST_API static void set_logger(\n    std::function<void(const std::string& component,\n                       const std::string& msg,\n                       LogLevel)> f,\n    std::vector<Logger::LogComponent>&& components,\n    bool force_stderr_log = false);\n"})}),"\n",(0,t.jsx)(n.p,{children:"The logger method's have been removed. Only a method to set the logger callback remains, which is the one which also takes the component being logged in the lambda"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'class MCLoggerOSLog: NSObject, MCLoggerDelegate {\n  func onLog(withMessage message: String, level: MCLogLevel) {\n    switch(level) {\n    case .LOG:\n      Logger.sdk.info("\\(message)")\n      break\n    case .DEBUG, .VERBOSE:\n      Logger.sdk.debug("\\(message)")\n      break\n    case .WARNING:\n      Logger.sdk.warning("\\(message)")\n      break\n    case .ERROR:\n      Logger.sdk.error("\\(message)")\n      break\n    case .OFF:\n      break\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Enrichments made to data that can be valuable for troubleshooting issues such as poor network conditions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Exposed stats information for: ",(0,t.jsx)(n.a,{href:"https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-freezecount",children:"freeze_count"})," , ",(0,t.jsx)(n.a,{href:"https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-pausecount",children:"pause_count"}),", ",(0,t.jsx)(n.a,{href:"https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-totalfreezesduration",children:"total_freezes_duration"})," , and ",(0,t.jsx)(n.a,{href:"https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-totalpausesduration",children:"total_pauses_duration"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["For debugging and analytic purposes the Stats object now contains StreamDetails vartiant which holds either StreamViewDetails/StreamPublishDetails based on if you are viewing/publishing a stream.",(0,t.jsx)(n.br,{}),"\n","The StreamViewDetails object contains strings describing stream ID, cluster ID, stream viewer ID, subscriber ID.",(0,t.jsx)(n.br,{}),"\n","The StreamPublishDetails object contains strings describing stream ID, cluster ID, uuid, feed ID, publisher ID."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",metastring:'title="Kotlin/Android"',children:"data class StreamPublishDetails(\n    val publisherId: String,\n    val clusterId: String,\n    val streamId: String,\n    val feedId: String,\n    val uuid: String\n) : StreamDetails()\ndata class StreamViewDetails(\n    val subscriberId: String,\n    val clusterId: String,\n    val streamId: String,\n    val streamViewId: String\n) : StreamDetails()\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-swift",metastring:'title="Swift/iOS"',children:"MILLICAST_API @interface MCStreamPublishDetails: NSObject\n@property(nonatomic, copy) NSString * publisherId;\n@property(nonatomic, copy) NSString * clusterId;\n@property(nonatomic, copy) NSString * streamId;\n@property(nonatomic, copy) NSString * feedId;\n@property(nonatomic, copy) NSString * uuid;\n@end\nMILLICAST_API @interface MCStreamViewDetails: NSObject\n@property(nonatomic, copy) NSString * subscriberId;\n@property(nonatomic, copy) NSString * clusterId;\n@property(nonatomic, copy) NSString * streamId;\n@property(nonatomic, copy) NSString * streamViewId;\n@end\nMILLICAST_API @interface MCStreamDetails: NSObject\n-(MCStreamPublishDetails* _Nullable) asPublishDetails;\n-(MCStreamViewDetails* _Nullable) asViewDetails;\n@end\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"struct MILLICAST_API StreamViewDetails {\n  std::string stream_view_id;\n  std::string subscriber_id;\n  std::string cluster_id;\n  std::string stream_id;\n};\nstruct MILLICAST_API StreamPublishDetails {\n  std::string uuid;\n  std::string feed_id;\n  std::string publisher_id;\n  std::string cluster_id;\n  std::string stream_id;\n};\nusing StreamDetails = std::variant<StreamViewDetails, StreamPublishDetails>;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"additional-updates",children:"Additional Updates"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"General"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed an issue where an H.264 stream encoded with zero latency and sliced-threads options enabled would have artifacts in the decoded frames when packet loss would occur."}),"\n",(0,t.jsx)(n.li,{children:"For H.264 decoders update support for missing HIGH profiles and 1080p."}),"\n",(0,t.jsx)(n.li,{children:"Fix C++ publisher sample app crash when not providing credentials."}),"\n",(0,t.jsx)(n.li,{children:"Fixing stability of the C++ AudioCapturer."}),"\n",(0,t.jsx)(n.li,{children:"Introduce RTCIceCandidatePair statistics in the stats report."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Android"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Improved Android SDK playback experience following simulcast layer switches.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Fixed extended freeze of frame during the switch between simulcast layers, especially prevelant during frequent switchines.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Greatly reduced the number of freezes when packet loss experienced."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Improved Android SDK playback in constrained bandwidth scenarios."}),"\n",(0,t.jsxs)(n.li,{children:["Added multiple MCCMSampleBufferVideoRendererDelegate to MCCMSampleBufferVideoRenderer","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Supports multiple MCSampleBufferVideoUIView to use a same renderer object"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Fix crash related to JNI layer overflow when reporting statistics"}),"\n",(0,t.jsx)(n.li,{children:"Fixing frameWidth, frameHeight and timestamp stats values being incorrect."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Apple / iOS"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fix jagged lines that occur when using the Metal video renderer (Apple platforms)"}),"\n",(0,t.jsxs)(n.li,{children:["On MacOS platforms the SDK will check for microphone/camera/screen-share permissions.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"It will also request permissions if not previously requested."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Improve certain public API naming in ObjC/Swift APIs."}),"\n",(0,t.jsx)(n.li,{children:"Added layer event members target fps/height/width/bitrate."}),"\n",(0,t.jsxs)(n.li,{children:["Obj-C enums are changed to utilise NS_ENUM rather than being global C based",(0,t.jsx)(n.br,{}),"\n","enums"]}),"\n",(0,t.jsx)(n.li,{children:"Removing OpenGL as an option in favor of using Metal."}),"\n",(0,t.jsx)(n.li,{children:"Enabling the Metal Video renderer on macOS. Now,"}),"\n",(0,t.jsxs)(n.li,{children:["MCIosVideoRenderer has been renamed to MCAcceleratedVideoRenderer and the corresponding",(0,t.jsx)(n.br,{}),"\n","header files ios_renderer.h to accelerated_video_renderer.h"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"2024-04-25--native-sdk-184",children:["2024-04-25 | Native SDK ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.8.4",children:"1.8.4"})]}),"\n",(0,t.jsx)(n.h4,{id:"fixes",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Fixed a bug where invalid metadata information was placed when creating debian packages. The ",(0,t.jsx)(n.code,{children:"Architecture"})," field would always default to amd64. This caused issues when unpacking the ",(0,t.jsx)(n.code,{children:"debian11-armv8a"})," packages."]}),"\n",(0,t.jsx)(n.li,{children:"Introduced a new method to ObjC SDK to allow setting the log levels for the Sdk/Webrtc/Websocket components"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"+ (void)setLogLevelWithSdk:(MCLogLevel)sdkLogLevel\n                    Webrtc:(MCLogLevel)webrtcLogLevel\n                 Websocket:(MCLogLevel)websocketLogLevel;\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Added auto collection of WebRTC logs in ObjC SDK. This is inline with what was done for Android in the ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.8.2",children:"1.8.2"})," release."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-04-18---175-and-183",children:["2024-04-18 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.7.5",children:"1.7.5"})," and ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.8.3",children:"1.8.3"})]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-1",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Fixed a crash in the Objective C SDK caused by calling the ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/cpp/protocol_m_c_video_frame-p.html#aef4bd364903f2b7b78fcb7d3c4b47168",children:"frameType"})," method, which resulted in the ",(0,t.jsx)(n.strong,{children:"NSInvalidArgumentException"})," exception."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Introduced a new ",(0,t.jsx)(n.strong,{children:"Native"})," video type (",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/cpp/namespacemillicast.html#a3e878ddbbd034e20ba1b96575ac0fd2a",children:"Desktop"}),", ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/cpp/objc_2_millicast_s_d_k_2capabilities_8h.html#ac37bb3c55eced5c69ad84759f23e6c90",children:"Apple"}),", ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast.utils/-video-type/index.html",children:"Android"}),") to describe the native frames."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Fixed an issue where VideoType incorrectly returned the ",(0,t.jsx)(n.strong,{children:"Unknown"})," type."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-04-12---182",children:["2024-04-12 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.8.2",children:"1.8.2"})]}),"\n",(0,t.jsx)(n.h4,{id:"features",children:"Features"}),"\n",(0,t.jsx)(n.p,{children:"Introduced a new API for setting logger callbacks. The API accepts the components for which log callbacks are desired to be received."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"/**\n * @brief The LogComponent enum describes which components are possible to\n * receive logs from in the log callback.\n */\nenum class LogComponent { SDK, WEBRTC, WEBSOCKET };\n\n/**\n * @brief Sets the object that will receive the logs from the SDK.\n * @param f The logger object with first parameter being the description of the\n * component the log came from, the second being the message itself, and\n * the log level.\n * @param components A vector containing the list of components you would like\n * to receive log callbacks for.\n */\nMILLICAST_API static void set_logger(\n  std::function<void(const std::string& component,\n                     const std::string& msg,\n                     LogLevel)> f,\n  std::vector<Logger::LogComponent>&& components);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"fixes-2",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed an issue on Android where decoding H.264 Simulcast streams would result in low frame rates after layer changes."}),"\n",(0,t.jsx)(n.li,{children:"Fixed an issue where applications that set logger callback would not receive logs from WebRTC. The issue was fixed by introducing a new C++ API, as described in the features section."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-04-04---181",children:["2024-04-04 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.8.1",children:"1.8.1"})]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-3",children:"Fixes"}),"\n",(0,t.jsxs)(n.p,{children:["Fixed an issue on Android where calling the ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-client/connect.html?query=suspend%20fun%20connect(connectionOptions:%20ConnectionOptions?%20=%20null):%20Boolean",children:"connect"})," method on a non-live stream led to unresolved asynchronous operations and hanging the Subscriber until the stream went live, which resulted in blocking subsequent calls to ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-client/disconnect.html",children:"disconnect"}),". The fix maintains the necessity of calling ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-subscriber/subscribe.html?query=suspend%20fun%20subscribe(options:%20Option%20=%20Option())",children:"subscribe"})," after connecting and receiving the SubscriberConnectionState.Connected event."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-03-20---180",children:["2024-03-20 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.8.0",children:"1.8.0"})]}),"\n",(0,t.jsx)(n.h4,{id:"features-1",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Introduced a new asynchronous API for all Apple platforms, such as iOS, tvOS, and macOS. This change impacts the way of publishing streams. For more information, see the updated ",(0,t.jsx)(n.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/ios/sdk/",children:"Getting Started"})," document."]}),"\n",(0,t.jsx)(n.li,{children:"Enabled the use of Simulcast and Scalable Video Coding (SVC) at the same time when using the VP8 codec."}),"\n",(0,t.jsxs)(n.li,{children:["Reduced the package size of the Android SDK by removing unused NDI library. The total ",(0,t.jsx)(n.code,{children:"aar"})," size is reduced by 7.1 MB. Approximate per-architecture reductions in size:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x86_64"}),": 2.9 MB, the total ",(0,t.jsx)(n.code,{children:"aar"})," size is 6.5 MB"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x86"}),": 1.5 MB, the total ",(0,t.jsx)(n.code,{children:"aar"})," size is 6.4 MB"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"arm64-v8a"}),": 1.3 MB, the total ",(0,t.jsx)(n.code,{children:"aar"})," size is 5.7 MB"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"armeabi-v7a"}),": 1.4 MB, the total ",(0,t.jsx)(n.code,{children:"aar"})," size is 4.7 MB"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-4",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed an issue that blocked applications from enabling SVC when using the AV1 codec. Now applications can use either VP8 with Simulcast and SVC or AV1 with SVC."}),"\n",(0,t.jsxs)(n.li,{children:["Fixed an issue where elements were unnecessarily prefixed ",(0,t.jsx)(n.code,{children:"video/"})," or ",(0,t.jsx)(n.code,{children:"audio/"})," in the active event's tracks on the subscriber."]}),"\n",(0,t.jsx)(n.li,{children:"Fixed the generation of audio and video source statistics."}),"\n",(0,t.jsx)(n.li,{children:"Improved stability."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,t.jsx)(n.h5,{id:"android",children:"Android"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Separated the Subscriber/Publisher connection ",(0,t.jsx)(n.code,{children:"com.millicast.clients.state.ConnectionState"})," states into ",(0,t.jsx)(n.code,{children:"com.millicast.subscribers.state.SubscriberConnectionState"})," and ",(0,t.jsx)(n.code,{children:"com.millicast.publishers.state.PublisherConnectionState"}),". These two state classes now contain the full life cycle."]}),"\n",(0,t.jsx)(n.li,{children:"Removed the NDI library, which means that there are no more NDI references in the Android SDK."}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"apple-platforms",children:"Apple platforms"}),"\n",(0,t.jsxs)(n.p,{children:["The new asynchronous API replaced the previous synchronous one, which impacts the way of publishing streams. For more information, see the updated ",(0,t.jsx)(n.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/ios/sdk/",children:"Getting Started"})," document."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-03-18---180-beta1",children:["2024-03-18 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.8.0-beta.1",children:"1.8.0-beta.1"})]}),"\n",(0,t.jsx)(n.h4,{id:"features-2",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Introduced a new asynchronous API for all Apple platforms, such as iOS, tvOS, and macOS. This change impacts the way of publishing streams."}),"\n",(0,t.jsx)(n.li,{children:"Enabled the use of Simulcast and Scalable Video Coding (SVC) at the same time when using the VP8 codec."}),"\n",(0,t.jsxs)(n.li,{children:["Reduced the package size of the Android SDK by removing unused NDI library. The total ",(0,t.jsx)(n.code,{children:"aar"})," size is reduced by 7.1 MB. Approximate per-architecture reductions in size:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x86_64"}),": 2.9 MB"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x86"}),": 1.5 MB"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"arm64-v8a"}),": 1.3 MB"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"armeabi-v7a"}),": 1.4 MB"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-5",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed an issue that blocked applications from enabling SVC when using the AV1 codec. Now applications can use either VP8 with Simulcast and SVC or AV1 with SVC."}),"\n",(0,t.jsxs)(n.li,{children:["Fixed an issue where elements were unnecessarily prefixed ",(0,t.jsx)(n.code,{children:"video/"})," or ",(0,t.jsx)(n.code,{children:"audio/"})," in the active event's tracks on the subscriber."]}),"\n",(0,t.jsx)(n.li,{children:"Fixed the generation of audio and video source statistics."}),"\n",(0,t.jsx)(n.li,{children:"Improved stability."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"breaking-changes-1",children:"Breaking changes"}),"\n",(0,t.jsx)(n.h5,{id:"android-1",children:"Android"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Separated the Subscriber/Publisher connection ",(0,t.jsx)(n.code,{children:"com.millicast.clients.state.ConnectionState"})," states into ",(0,t.jsx)(n.code,{children:"com.millicast.subscribers.state.SubscriberConnectionState"})," and ",(0,t.jsx)(n.code,{children:"com.millicast.publishers.state.PublisherConnectionState"}),". These two state classes now contain the full life cycle."]}),"\n",(0,t.jsx)(n.li,{children:"Removed the NDI library for Android, this means that there are no more NDI references in the Android SDK."}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"apple-platforms-1",children:"Apple platforms"}),"\n",(0,t.jsx)(n.p,{children:"The new asynchronous API replaced the previous synchronous one."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-03-15---180-alpha2",children:["2024-03-15 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.8.0-alpha.2",children:"1.8.0-alpha.2"})]}),"\n",(0,t.jsx)(n.h4,{id:"features-3",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Introduced a new asynchronous API for all Apple platforms, such as iOS, tvOS, and macOS. This change impacts the way of publishing streams."}),"\n",(0,t.jsx)(n.li,{children:"Enabled the use of Simulcast and Scalable Video Coding (SVC) at the same time when using the VP8 codec."}),"\n",(0,t.jsxs)(n.li,{children:["Reduced the package size of the Android SDK by removing unused NDI library. The total ",(0,t.jsx)(n.code,{children:"aar"})," size is reduced by 7.1 MB. Approximate per-architecture reductions in size:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x86_64"}),": 2.9 MB"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x86"}),": 1.5 MB"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"arm64-v8a"}),": 1.3 MB"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"armeabi-v7a"}),": 1.4 MB"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-6",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed an issue that blocked applications from enabling SVC when using the AV1 codec. Now applications can use either VP8 with Simulcast and SVC or AV1 with SVC."}),"\n",(0,t.jsxs)(n.li,{children:["Fixed an issue where elements were unnecessarily prefixed ",(0,t.jsx)(n.code,{children:"video/"})," or ",(0,t.jsx)(n.code,{children:"audio/"})," in the active event's tracks on the subscriber."]}),"\n",(0,t.jsx)(n.li,{children:"Fixed the generation of audio and video source statistics."}),"\n",(0,t.jsx)(n.li,{children:"Improved stability."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"breaking-changes-2",children:"Breaking changes"}),"\n",(0,t.jsx)(n.h5,{id:"android-2",children:"Android"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Separated the Subscriber/Publisher connection ",(0,t.jsx)(n.code,{children:"com.millicast.clients.state.ConnectionState"})," states into ",(0,t.jsx)(n.code,{children:"com.millicast.subscribers.state.SubscriberConnectionState"})," and ",(0,t.jsx)(n.code,{children:"com.millicast.publishers.state.PublisherConnectionState"}),". These two state classes now contain the full life cycle."]}),"\n",(0,t.jsx)(n.li,{children:"Removed the NDI library for Android, this means that there are no more NDI references in the Android SDK."}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"objective-cswift-sdk",children:"Objective C/Swift SDK"}),"\n",(0,t.jsx)(n.p,{children:"The new asynchronous API replaced the previous synchronous one."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-03-14---180-alpha1",children:["2024-03-14 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.8.0-alpha.1",children:"1.8.0-alpha.1"})]}),"\n",(0,t.jsx)(n.h4,{id:"features-4",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Introduced a new asynchronous API for all Apple platforms, such as iOS, tvOS, and macOS. This change impacts the way of publishing streams."}),"\n",(0,t.jsx)(n.li,{children:"Enabled the use of Simulcast and Scalable Video Coding (SVC) at the same time when using the VP8 codec."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-7",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed an issue that blocked applications from enabling SVC when using the AV1 codec. Now applications can use either VP8 with Simulcast and SVC or AV1 with SVC."}),"\n",(0,t.jsx)(n.li,{children:"Fixed the generation of audio and video source statistics."}),"\n",(0,t.jsx)(n.li,{children:"Improved stability."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-03-14---174",children:["2024-03-14 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.7.4",children:"1.7.4"})]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-8",children:"Fixes"}),"\n",(0,t.jsx)(n.p,{children:"Fixed a string conversion issue that affected UTF-formatted strings on Android."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-02-28---173",children:["2024-02-28 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.7.3",children:"1.7.3"})]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-9",children:"Fixes"}),"\n",(0,t.jsx)(n.h5,{id:"general",children:"General"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed a race condition when rendering video tracks."}),"\n",(0,t.jsx)(n.li,{children:"Fixed a race condition inside the NDI Video Renderer implementation."}),"\n"]}),"\n",(0,t.jsx)(n.h5,{id:"android-3",children:"Android"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed an issue with an internal queue that could cause inconsistencies."}),"\n",(0,t.jsxs)(n.li,{children:["Improved the ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-client/is-connected.html",children:"isConnected"}),", ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-subscriber/is-subscribed.html",children:"isSubscribed"}),", and ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-publisher/is-publishing.html",children:"isPublishing"})," method to prevent blocking."]}),"\n",(0,t.jsx)(n.li,{children:"Fixed the missing reset for the subscriber's and publisher's state."}),"\n",(0,t.jsxs)(n.li,{children:["Modified the ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast.devices.source/-source/release.html",children:"release"})," function to prevent suspending it."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-02-14---172",children:["2024-02-14 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.7.2",children:"1.7.2"})]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-10",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed an issue causing a crash when using video rendering on Windows."}),"\n",(0,t.jsx)(n.li,{children:"Fixed incorrect Android stats generation."}),"\n",(0,t.jsxs)(n.li,{children:["Fixed an issue related to the absence of the optional ",(0,t.jsx)(n.code,{children:"android.hardware.microphone"})," requirement."]}),"\n",(0,t.jsx)(n.li,{children:"Fixed an issue where a disconnection did not flush the Subscriber's state object on Android."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"changes",children:"Changes"}),"\n",(0,t.jsxs)(n.p,{children:["Introduced the ",(0,t.jsx)(n.code,{children:"addRemoteTrackForResult"})," Android API to improve the management of the subscriber's tracks. The API is similar to ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-subscriber/add-remote-track.html",children:"addRemoteTrack"})," but it returns a ",(0,t.jsx)(n.code,{children:"TrackHolder"})," directly. The subscriber's ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-subscriber/state.html",children:"state"})," now contains a list of tracks, their activity, and the existing flow."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-02-09---171",children:["2024-02-09 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.7.1",children:"1.7.1"})]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-11",children:"Fixes"}),"\n",(0,t.jsx)(n.p,{children:"Fixed a race condition leading to a crash on Linux after stopping video capture."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-02-08---170",children:["2024-02-08 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.7.0",children:"1.7.0"})]}),"\n",(0,t.jsx)(n.h4,{id:"features-5",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Refactored the Android SDK to introduce the following changes:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Prioritization of the Kotlin implementation to make Kotlin the primary language for developing and interacting with the Android SDK."}),"\n",(0,t.jsx)(n.li,{children:"Key instantiation for classes instead of builders to streamline the codebase for greater clarity and conciseness."}),"\n",(0,t.jsx)(n.li,{children:"A coroutine-based implementation for both Subscriber and Publisher calls that enhances the SDK's responsiveness and efficiency."}),"\n",(0,t.jsx)(n.li,{children:"A flow-based eventing system that is useful for handling and reacting to events."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Introduced macOS and iOS support for H.265."}),"\n",(0,t.jsxs)(n.li,{children:["Introduced ",(0,t.jsx)(n.strong,{children:"GNU libstdc++"})," versions of the SDK for the proper Ubuntu compatibility."]}),"\n",(0,t.jsxs)(n.li,{children:["Introduced the ",(0,t.jsx)(n.strong,{children:"debian11-armv8a"})," version of the SDK with no X11 and PulseAudio dependencies, which is useful for publishing from ARM64 Linux boards."]}),"\n",(0,t.jsxs)(n.li,{children:["Added the H.264 hardware encoding support for Raspberry Pi3b+/4/5 boards with the ",(0,t.jsx)(n.strong,{children:"debian11-armv8a"})," package."]}),"\n",(0,t.jsxs)(n.li,{children:["Improved the ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/cpp/structmillicast_1_1_viewer_listener.html#ada345cbb1f379fc37b1a5bbbf13e33e4",children:"on_layers"})," event and the respective ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/cpp/structmillicast_1_1_viewer_layer_data.html",children:"ViewerLayerData"})," structure to include fields for the ",(0,t.jsx)(n.code,{children:"resolution"})," of the layer."]}),"\n",(0,t.jsx)(n.li,{children:"Upgraded the WebRTC version to 118."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-12",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Introduced Simulcast publishing support for macOS and iOS platforms."}),"\n",(0,t.jsx)(n.li,{children:"Fixed JNI-related issues on Android."}),"\n",(0,t.jsx)(n.li,{children:"Fixed an issue that prevented using the SDK on iOS or tvOS simulators."}),"\n",(0,t.jsx)(n.li,{children:"Introduced stability improvements."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"changes-1",children:"Changes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The SDK now links FFmpeg dynamically on Linux and Windows. The SDK package provides a dynamic FFmpeg library."}),"\n",(0,t.jsx)(n.li,{children:"Created macOS universal framework."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"breaking-changes-3",children:"Breaking Changes"}),"\n",(0,t.jsx)(n.p,{children:"This release introduces several braking changes and requires familiarizing with the following chapters."}),"\n",(0,t.jsx)(n.h5,{id:"new-signature-of-the-on_layers-event",children:"New signature of the on_layers event"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/cpp/structmillicast_1_1_viewer_listener.html#ada345cbb1f379fc37b1a5bbbf13e33e4",children:"on_layers"})," event has a new signature to accept an array of strings for the inactive layers. The following code presents the current signature of the callback:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"virtual void on_layers( const std::string& mid,\n      const std::vector<ViewerLayerData>& active_layers,\n      const std::vector<std::string>& inactive_layers) = 0;\n"})}),"\n",(0,t.jsx)(n.p,{children:"This change is propagated to the iOS layer. The following example presents the current signature of the callback for the Objective C SDK:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectivec",children:"(void) onLayers: (nonnull NSString*) mid activeLayers:(nonnull NSArray<MCLayerData*>*) activeLayers inactiveLayers:(nonnull NSArray<NSString*>*) inactiveLayers;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The Kotlin SDK is also impacted by this modification and requires applications to listen for the Subscriber's layers ",(0,t.jsx)(n.code,{children:"Flow<Layers>"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"subscriber.layers.collect { layers ->\n  // manage the layers object here\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following code presents the current signature for the SDK:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"data class Layers(\n    val mid: String,\n    val activeLayers: Array<LayerData>,\n    val inactiveLayersEncodingIds: Array<String>\n)\n"})}),"\n",(0,t.jsx)(n.h5,{id:"modified-values-of-the-viewerlayerdata-structure",children:"Modified values of the ViewerLayerData structure"}),"\n",(0,t.jsxs)(n.p,{children:["Values of the ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/cpp/structmillicast_1_1_viewer_layer_data.html",children:"ViewerLayerData"})," structure that may not be present for a layer, such as spatial ID or temporal ID, are now optional. The following example presents the new signature of the structure:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"struct ViewerLayerData {\n  struct Resolution {\n    int width;\n    int height;\n  };\n  std::string encoding_id;\n  int bitrate = 0;\n  std::optional<int> temporal_layer_id;\n  std::optional<int> spatial_layer_id;\n  std::optional<Resolution> layer_resolution;\n  std::optional<int> max_temporal_layer_id;\n  std::optional<int> max_spatial_layer_id;\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This change is propagated to the iOS layer. The current ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/cpp/interface_m_c_layer_data.html",children:"MCLayerData"})," structure in the Objective C SDK is presented in the following example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectivec",children:"@interface MCLayerResolution : NSObject\n@property int height;\n@property int width;\n@end\n\nMILLICAST_API @interface MCLayerData : NSObject\n@property (nonatomic, strong, nonnull) NSString* encodingId;\n@property int bitrate;\n@property(nonatomic, assign, nullable) NSNumber *spatialLayerId;\n@property(nonatomic, assign, nullable) NSNumber *temporalLayerId;\n@property(nonatomic, assign, nullable) NSNumber *maxTemporalLayerId;\n@property(nonatomic, assign, nullable) NSNumber *maxSpatialLayerId;\n@property(nonatomic, assign, nullable) MCLayerResolution* layerResolution;\n@end\n"})}),"\n",(0,t.jsx)(n.p,{children:"This change also impacts the Kotlin implementation. The following example presents the new signature of the structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'data class LayerResolution(\n    val width: Int = 0,\n    val height: Int = 0\n)\n\ndata class LayerData(\n    val encodingId: String = "",\n    val bitrate: Int = 0,\n    val temporalLayerId: Int? = null,\n    val spatialLayerId: Int? = null,\n\n    val maxSpatialLayerId: Int? = null,\n    val maxTemporalLayerId: Int? = null,\n    val resolution: LayerResolution? = null\n)\n'})}),"\n",(0,t.jsx)(n.h5,{id:"modified-kotlin-implementation",children:"Modified Kotlin implementation"}),"\n",(0,t.jsxs)(n.p,{children:["In the Kotlin implementation, the ",(0,t.jsx)(n.strong,{children:"getStats"})," method is now removed in favor of ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-client/enable-stats.html?query=suspend%20fun%20enableStats(enabled:%20Boolean)",children:"enableStats"}),", which emits reports asynchronously via the corresponding SharedFlow."]}),"\n",(0,t.jsx)(n.p,{children:"Using the Kotlin SDK to create a Publisher or Subscriber now requires calling the Core class implementation, as in the following example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"Core.createPublisher()\n\nCore.createSubscriber()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Additionally, the SDK now provides an asynchronous implementation, so to consume the Subscriber and Publisher features, perform coroutines."}),"\n",(0,t.jsx)(n.p,{children:"The Listener implementation is now removed and replaced with SharedFlow, which is now provided by both main classes. For the Subscriber class, several new SharedFlow events have been introduced:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-subscriber/state.html",children:"state"}),": Provides information about the state of the subscriber."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-subscriber/signaling-error.html",children:"signalingError"}),": Provides all propagated errors."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-subscriber/rtc-stats-report.html",children:"rtcStatsReport"}),": Provides WebRTC statistics when stats reporting is enabled. The statistics report provides the Stats object based on a Sealed class. Using a ",(0,t.jsx)(n.code,{children:"when"})," statement helps find various statistics."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-subscriber/track.html",children:"track"}),": Provides all audio and video track events, including the track itself and its associated Media ID identifier."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-subscriber/activity.html",children:"activity"}),": Provides information about the active and inactive states of the subscriber's activity."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-subscriber/layers.html",children:"layers"}),": Corresponds to all layers events, providing information about the layers associated with the subscriber."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast/-subscriber/vad.html",children:"vad"}),": Provides voice activity events."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For more information on SharedFlow, see the following example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"data class SubscriberState(\n    val connectionState: ConnectionState = ConnectionState.Default,\n    val subscriptionState: SubscriptionState = SubscriptionState.Default,\n    val viewers: Int = 0\n)\n\nsealed class TrackHolder(\n    val mid: String?,\n    val track: Track\n) {\n    class AudioTrackHolder(\n        mid: String?,\n        val audioTrack: AudioTrack\n    ) : TrackHolder(mid, audioTrack)\n\n    class VideoTrackHolder(\n        mid: String?,\n        val videoTrack: VideoTrack\n    ) : TrackHolder(mid, videoTrack)\n}\n\nsealed class ActivityStream {\n    data class Active(\n        val streamId: String,\n        val track: Array<String>,\n        val sourceId: String?\n    ) : ActivityStream()\n\n    data class Inactive(\n        val streamId: String,\n        val sourceId: String?\n    ) : ActivityStream()\n}\n\ndata class Layers(\n    val mid: String,\n    val activeLayers: Array<LayerData>,\n    val inactiveLayersEncodingIds: Array<String>\n)\n"})}),"\n",(0,t.jsx)(n.h5,{id:"the-auto-reconnect-property-removal",children:"The auto reconnect property removal"}),"\n",(0,t.jsxs)(n.p,{children:["The auto reconnect property is removed from publisher and subscriber options in favour of using connection options. Use ",(0,t.jsx)(n.strong,{children:"ConnectionOptions"})," to set the ",(0,t.jsx)(n.strong,{children:"autoReconnect"})," (",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast.clients/-connection-options/auto-reconnect.html?query=val%20autoReconnect:%20Boolean",children:"Android"}),", ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/cpp/interface_m_c_connection_options.html#af9e0ed6b2affd725634db6d158ea7ab3",children:"iOS"}),", ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/cpp/structmillicast_1_1_client_connection_options.html#a78e72d74ccdbb7df4e85725a067b83e1",children:"Desktop"}),") property:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"//file: millicast-sdk/client.h\n\nstruct MILLICAST_API ClientConnectionOptions {\n  bool auto_reconnect{true};\n};\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectivec",children:"//file: MillicastSDK/client.h\nMILLICAST_API @interface MCConnectionOptions: NSObject\n@property(nonatomic, assign) BOOL autoReconnect;\n@end\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"package com.millicast.clients;\n\npublic class ConnectionOptions {\n    public boolean autoReconnect;\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2024-02-04---170-beta1",children:["2024-02-04 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.7.0-beta.1",children:"1.7.0-beta.1"})]}),"\n",(0,t.jsx)(n.h4,{id:"features-6",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Refactored the Android SDK to introduce the following changes:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Prioritization of the Kotlin implementation to make Kotlin the primary language for developing and interacting with the Android SDK."}),"\n",(0,t.jsx)(n.li,{children:"Key instantiation for classes instead of builders to streamline the codebase for greater clarity and conciseness."}),"\n",(0,t.jsx)(n.li,{children:"A coroutine-based implementation for both Subscriber and Publisher calls that enhances the SDK's responsiveness and efficiency."}),"\n",(0,t.jsx)(n.li,{children:"A flow-based eventing system that is useful for handling and reacting to events."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Introduced macOS and iOS support for H.265."}),"\n",(0,t.jsxs)(n.li,{children:["Introduced ",(0,t.jsx)(n.code,{children:"GNU libstdc++"})," versions of the SDK for the proper Ubuntu compatibility."]}),"\n",(0,t.jsxs)(n.li,{children:["Introduced the ",(0,t.jsx)(n.code,{children:"debian11-armv8a"})," version of the SDK with no X11 and PulseAudio dependencies, which is useful for publishing from ARM64 Linux boards."]}),"\n",(0,t.jsxs)(n.li,{children:["Added the H.264 hardware encoding support for Raspberry Pi3b+/4/5 boards with the ",(0,t.jsx)(n.code,{children:"debian11-armv8a"})," package."]}),"\n",(0,t.jsxs)(n.li,{children:["Improved the ",(0,t.jsx)(n.code,{children:"millicast::ViewerListener::on_layers"})," event and the respective ",(0,t.jsx)(n.code,{children:"millicast::ViewerLayerData"})," structure to include fields for the ",(0,t.jsx)(n.code,{children:"resolution"})," of the layer."]}),"\n",(0,t.jsx)(n.li,{children:"Upgraded the WebRTC version to 118."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-13",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Introduced Simulcast publishing support for macOS and iOS platforms."}),"\n",(0,t.jsx)(n.li,{children:"Fixed JNI-related issues on Android."}),"\n",(0,t.jsx)(n.li,{children:"Fixed an issue that prevented using the SDK on iOS or tvOS simulators."}),"\n",(0,t.jsx)(n.li,{children:"Introduced stability improvements."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"changes-2",children:"Changes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The SDK now links FFmpeg dynamically on Linux and Windows. The SDK package provides a dynamic FFmpeg library."}),"\n",(0,t.jsx)(n.li,{children:"Created macOS universal framework."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"breaking-changes-4",children:"Breaking Changes"}),"\n",(0,t.jsx)(n.p,{children:"This release introduces several braking changes and requires familiarizing with the following chapters."}),"\n",(0,t.jsx)(n.h5,{id:"new-signature-of-the-on_layers-event-1",children:"New signature of the on_layers event"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"millicast::ViewerListener::on_layers"})," event has a new signature to accept an array of strings for the ",(0,t.jsx)(n.code,{children:"inactive"})," layers. The following code presents the current signature of the callback:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"virtual void on_layers( const std::string& mid,\n      const std::vector<ViewerLayerData>& active_layers,\n      const std::vector<std::string>& inactive_layers) = 0;\n"})}),"\n",(0,t.jsx)(n.p,{children:"This change is propagated to the iOS layer. The following example presents the current signature of the callback for the Objective C SDK:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectivec",children:"(void) onLayers: (nonnull NSString*) mid activeLayers:(nonnull NSArray<MCLayerData*>*) activeLayers inactiveLayers:(nonnull NSArray<NSString*>*) inactiveLayers;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The Kotlin SDK is also impacted by this modification and requires applications to listen for the Subscriber's layers ",(0,t.jsx)(n.code,{children:"Flow<Layers>"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"subscriber.layers.collect { layers ->\n  // manage the layers object here\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The following code presents the current signature for the SDK:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"data class Layers(\n    val mid: String,\n    val activeLayers: Array<LayerData>,\n    val inactiveLayersEncodingIds: Array<String>\n)\n"})}),"\n",(0,t.jsx)(n.h5,{id:"modified-values-of-the-viewerlayerdata-structure-1",children:"Modified values of the ViewerLayerData structure"}),"\n",(0,t.jsxs)(n.p,{children:["Values of the ",(0,t.jsx)(n.code,{children:"millicast::ViewerLayerData"})," structure that may not be present for a layer, such as spatial ID or temporal ID, are now optional. The following example presents the new signature of the structure:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"struct ViewerLayerData {\n  struct Resolution {\n    int width;\n    int height;\n  };\n  std::string encoding_id;\n  int bitrate = 0;\n  std::optional<int> temporal_layer_id;\n  std::optional<int> spatial_layer_id;\n  std::optional<Resolution> layer_resolution;\n  std::optional<int> max_temporal_layer_id;\n  std::optional<int> max_spatial_layer_id;\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"This change is propagated to the iOS layer. The current MCLayerData structure in the Objective C SDK is presented in the following example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectivec",children:"@interface MCLayerResolution : NSObject\n@property int height;\n@property int width;\n@end\n\nMILLICAST_API @interface MCLayerData : NSObject\n@property (nonatomic, strong, nonnull) NSString* encodingId;\n@property int bitrate;\n@property(nonatomic, assign, nullable) NSNumber *spatialLayerId;\n@property(nonatomic, assign, nullable) NSNumber *temporalLayerId;\n@property(nonatomic, assign, nullable) NSNumber *maxTemporalLayerId;\n@property(nonatomic, assign, nullable) NSNumber *maxSpatialLayerId;\n@property(nonatomic, assign, nullable) MCLayerResolution* layerResolution;\n@end\n"})}),"\n",(0,t.jsx)(n.p,{children:"This change also impacts the Kotlin implementation. The following example presents the new signature of the structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'data class LayerResolution(\n    val width: Int = 0,\n    val height: Int = 0\n)\n\ndata class LayerData(\n    val encodingId: String = "",\n    val bitrate: Int = 0,\n    val temporalLayerId: Int? = null,\n    val spatialLayerId: Int? = null,\n\n    val maxSpatialLayerId: Int? = null,\n    val maxTemporalLayerId: Int? = null,\n    val resolution: LayerResolution? = null\n)\n'})}),"\n",(0,t.jsx)(n.h5,{id:"modified-kotlin-implementation-1",children:"Modified Kotlin implementation"}),"\n",(0,t.jsxs)(n.p,{children:["In the Kotlin implementation, the ",(0,t.jsx)(n.code,{children:"getStats(boolean)"})," method is now removed in favor of ",(0,t.jsx)(n.code,{children:"enableStats(boolean)"}),", which emits reports asynchronously via the corresponding SharedFlow."]}),"\n",(0,t.jsx)(n.p,{children:"Using the Kotlin SDK to create a Publisher or Subscriber now requires calling the Core class implementation, as in the following example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"Core.createPublisher()\n\nCore.createSubscriber()\n"})}),"\n",(0,t.jsx)(n.p,{children:"Additionally, the SDK now provides an asynchronous implementation, so to consume the Subscriber and Publisher features, perform coroutines."}),"\n",(0,t.jsx)(n.p,{children:"The Listener implementation is now removed and replaced with SharedFlow, which is now provided by both main classes. For the Subscriber class, several new SharedFlow events have been introduced:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Subscriber#state"}),": Provides information about the state of the subscriber."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Subscriber#signalingError"}),": Provides all propagated errors."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Subscriber#rtcStatsReport"}),": Provides WebRTC statistics when stats reporting is enabled. The statistics report provides the Stats object based on a Sealed class. Using a ",(0,t.jsx)(n.code,{children:"when"})," statement helps find various statistics."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Subscriber#track"}),": Provides all audio and video track events, including the track itself and its associated Media ID identifier."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Subscriber#activity"}),": Provides information about the active and inactive states of the subscriber's activity."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Subscriber#layers"}),": Corresponds to all layers events, providing information about the layers associated with the subscriber."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For more information on SharedFlow, see the following example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"data class SubscriberState(\n    val connectionState: ConnectionState = ConnectionState.Default,\n    val subscriptionState: SubscriptionState = SubscriptionState.Default,\n    val viewers: Int = 0\n)\n\nsealed class TrackHolder(\n    val mid: String?,\n    val track: Track\n) {\n    class AudioTrackHolder(\n        mid: String?,\n        val audioTrack: AudioTrack\n    ) : TrackHolder(mid, audioTrack)\n\n    class VideoTrackHolder(\n        mid: String?,\n        val videoTrack: VideoTrack\n    ) : TrackHolder(mid, videoTrack)\n}\n\nsealed class ActivityStream {\n    data class Active(\n        val streamId: String,\n        val track: Array<String>,\n        val sourceId: String?\n    ) : ActivityStream()\n\n    data class Inactive(\n        val streamId: String,\n        val sourceId: String?\n    ) : ActivityStream()\n}\n\ndata class Layers(\n    val mid: String,\n    val activeLayers: Array<LayerData>,\n    val inactiveLayersEncodingIds: Array<String>\n)\n"})}),"\n",(0,t.jsx)(n.h5,{id:"setting-automatic-reconnection",children:"Setting automatic reconnection"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"auto_reconnect"})," property is no longer available in Publisher and Subscriber options. Use ",(0,t.jsx)(n.code,{children:"ConnectionOptions"})," to set the ",(0,t.jsx)(n.code,{children:"auto_reconnect"})," property, as in the following examples:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"//file: millicast-sdk/client.h\n\nstruct MILLICAST_API ClientConnectionOptions {\n  bool auto_reconnect{true};\n};\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objectivec",children:"//file: MillicastSDK/client.h\n\nMILLICAST_API @interface MCConnectionOptions: NSObject\n\n@property(nonatomic, assign) BOOL autoReconnect;\n\n@end\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:"package com.millicast.clients;\n\npublic class ConnectionOptions {\n    public boolean autoReconnect;\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2023-12-15---160",children:["2023-12-15 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.6.0",children:"1.6.0"})]}),"\n",(0,t.jsx)(n.h4,{id:"features-7",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Introduced the ability to write macOS applications using the Objective-C/Swift API."}),"\n",(0,t.jsxs)(n.li,{children:["Introduced a new ",(0,t.jsx)(n.strong,{children:"priority"})," parameter to support setting the priority of each feed when publishing multiple backup feeds."]}),"\n",(0,t.jsxs)(n.li,{children:["Introduced a new ",(0,t.jsx)(n.strong,{children:"recording"})," parameter that you can set to true to record published streams."]}),"\n",(0,t.jsx)(n.li,{children:"Added support for SwiftUI view and two UIKit views to simplify displaying video tracks and enhance development flexibility."}),"\n",(0,t.jsxs)(n.li,{children:["Added support for application-level screen sharing on iOS. The following code sample presents how you can use it:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-swift",children:'import MillicastSDK\nimport ReplayKit\nfunc exampleScreenShareFunc() async {\n  let publisher = MCPublisher.create()\n  let screenShareSource = MCAppShareSource(name: "example-screen-share-source", recorder: RPScreenRecorder.shared())\n  do {\n      let (audioTrack, videoTrack) = try await screenShareSource.startCapture()\n      if let audioTrack = audioTrack {\n          publisher.add(audioTrack)\n      }\n      if let videoTrack = videoTrack {\n          publisher.add(videoTrack)\n      }\n      // continue with the publisher setup (connection, publishing, etc.)\n  } catch {\n      // Handle error\n      // for example\n      // os_log(.error, log: log, "Could not start capture: %s", error.localizedDescription)\n  }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-14",children:"Fixes"}),"\n",(0,t.jsx)(n.p,{children:"Introduced general stability and performance improvements."}),"\n",(0,t.jsx)(n.h4,{id:"deprecations",children:"Deprecations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"setOptions"})," method is deprecated and replaced with a new ",(0,t.jsx)(n.code,{children:"connect"})," method from the ",(0,t.jsx)(n.code,{children:"ConnectionOptions"})," class, which connects the SDK with the Millicast platform. Additionally, the ",(0,t.jsx)(n.code,{children:"autoReconnect"})," method is deprecated on iOS and desktop platforms."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"hardware_support"})," method is deprecated and no longer supported."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"CustomSource"})," class is deprecated and replaced with ",(0,t.jsx)(n.code,{children:"CustomVideoSource"})," and ",(0,t.jsx)(n.code,{children:"CustomAudioSource"})," on iOS and desktop platforms."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"enableSvcWithMode"})," and ",(0,t.jsx)(n.code,{children:"disableSvc"})," methods are now deprecated and replaced with ",(0,t.jsx)(n.code,{children:"svcMode"})," from the ",(0,t.jsx)(n.code,{children:"ClientOptions"})," class."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"enableSimulcast"})," method is deprecated and replaced with the ",(0,t.jsx)(n.code,{children:"simulcast"})," method from ",(0,t.jsx)(n.code,{children:"ClientOptions"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2023-09-28---152",children:["2023-09-28 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.5.2",children:"1.5.2"})]}),"\n",(0,t.jsx)(n.h4,{id:"features-8",children:"Features"}),"\n",(0,t.jsx)(n.p,{children:"Upgraded WebRTC version to 112."}),"\n",(0,t.jsx)(n.h4,{id:"fixes-15",children:"Fixes"}),"\n",(0,t.jsx)(n.p,{children:"Refactored WebSocket timeout to prevent logging overload."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2023-07-04---151",children:["2023-07-04 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.5.1",children:"1.5.1"})]}),"\n",(0,t.jsx)(n.h4,{id:"features-9",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Added an option to enable and disable bandwidth in OBS WebRTC and the Native SDK. This can be useful when publishing in suboptimal network conditions."}),"\n",(0,t.jsx)(n.li,{children:"Added automatic resumption of publishing and subscribing upon recovery from a network disruption."}),"\n",(0,t.jsx)(n.li,{children:"The client auto_reconnect option can now be set to false to disable automatic reconnection."}),"\n",(0,t.jsx)(n.li,{children:"The Publisher and subscriber listeners now have an onDisconnected callback and their onConnectionError callbacks now include an integer status in addition to the reason."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-16",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The onDisconnected event is now triggered much faster and more reliably."}),"\n",(0,t.jsx)(n.li,{children:"Fixed an iOS AVAudioEngine crash."}),"\n",(0,t.jsx)(n.li,{children:"Fixed an issue where Bluetooth headsets did not work on iPadOS/iOS 16.4.1."}),"\n",(0,t.jsx)(n.li,{children:"The Publisher sample application now uses the first listed audio/video device if unable to find the provided audio/video device name."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"known-issues",children:"Known Issues"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When publishing in 4:4:4, the client sends 4:2:0 instead of 4:4:4."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2023-03-16---150",children:["2023-03-16 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.5.0",children:"1.5.0"})]}),"\n",(0,t.jsx)(n.h4,{id:"features-10",children:"Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Added the ability to switch a video source when a stream is in progress."}),"\n",(0,t.jsx)(n.li,{children:"Added the ability to render VP9 with 4:4:4 chroma subsampling on Android."}),"\n",(0,t.jsx)(n.li,{children:"Added the NV12 video format as a VideoType."}),"\n",(0,t.jsx)(n.li,{children:"Upgraded libWebRTC to m108."}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-17",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed an issue related to a root certificate issue on Windows."}),"\n",(0,t.jsx)(n.li,{children:"Fixed an issue where audio did not play when streamed from an external source on iOS."}),"\n",(0,t.jsx)(n.li,{children:"Deprecated the possibility to set the maximum bitrate using the client. Instead, we introduced the ability to set the minimum and maximum bitrate using the options structure."}),"\n",(0,t.jsx)(n.li,{children:"Improved the stream statistics reporting."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h2,{id:"2022-12-09---142",children:["2022-12-09 - ",(0,t.jsx)(n.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.4.2",children:"1.4.2"})]}),"\n",(0,t.jsx)(n.h4,{id:"deprecated-apis",children:"Deprecated APIs"}),"\n",(0,t.jsxs)(n.p,{children:["Replaced the SetMaxBitrate API with settings for min, max, and start bitrates via ",(0,t.jsx)(n.a,{href:"https://millicast.github.io/doc/latest/cpp/structmillicast_1_1_bitrate_settings.html",children:"publisher options"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"fixes-18",children:"Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixed an issue where a crash occurred after providing YUY2 frames."}),"\n",(0,t.jsx)(n.li,{children:"Fixed an issue where a crash occurred after enabling stats reporting."}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}}}]);