"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["7609"],{161748:function(e,t,r){r.d(t,{Z:()=>i});let i={tabItem:"tabItem_Ymn6"}},250065:function(e,t,r){r.d(t,{Z:()=>s,a:()=>c});var i=r(667294);let n={},a=i.createContext(n);function c(e){let t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),i.createElement(a.Provider,{value:t},e.children)}},292415:function(e,t,r){r.r(t),r.d(t,{default:()=>c});var i=r(785893);r(667294);var n=r(467026),a=r(161748);function c(e){let{children:t,hidden:r,className:c}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.Z)(a.Z.tabItem,c),hidden:r,children:t})}},308193:function(e,t,r){r.d(t,{Z:()=>m});var i=r(785893),n=r(667294),a=r(467026),c=r(69599),s=r(533057),o=r(7227),l=r(587244);function d(e){let{className:t,block:r,selectedValue:n,selectValue:s,tabValues:o}=e,d=[],{blockElementScrollPositionUntilNextRender:u}=(0,c.o5)(),h=e=>{let t=e.currentTarget,r=o[d.indexOf(t)].value;r!==n&&(u(t),s(r))},m=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let r=d.indexOf(e.currentTarget)+1;t=d[r]??d[0];break}case"ArrowLeft":{let r=d.indexOf(e.currentTarget)-1;t=d[r]??d[d.length-1]}}t?.focus()};return(0,i.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":r},t),children:o.map(e=>{let{value:t,label:r,attributes:c}=e;return(0,i.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>{d.push(e)},onKeyDown:m,onClick:h,...c,className:(0,a.Z)("tabs__item",l.Z.tabItem,c?.className,{"tabs__item--active":n===t}),children:r??t},t)})})}function u(e){let{lazy:t,children:r,selectedValue:c}=e,s=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){let e=s.find(e=>e.props.value===c);return e?(0,n.cloneElement)(e,{className:(0,a.Z)("margin-top--md",e.props.className)}):null}return(0,i.jsx)("div",{className:"margin-top--md",children:s.map((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==c}))})}function h(e){let t=(0,s.Y)(e);return(0,i.jsxs)("div",{className:(0,a.Z)("tabs-container",l.Z.tabList),children:[(0,i.jsx)(d,{...t,...e}),(0,i.jsx)(u,{...t,...e})]})}function m(e){let t=(0,o.default)();return(0,i.jsx)(h,{...e,children:(0,s.h)(e.children)},String(t))}},341922:function(e){e.exports=JSON.parse('{"id":"playback/players-sdks/android/sdk/sdk-migration-guide","title":"Migration Guide","description":"This migration guide provides some tips for upgrading or downgrading between releases of the Android SDK.","source":"@site/millicast/playback/players-sdks/android/sdk/sdk-migration-guide.mdx","sourceDirName":"playback/players-sdks/android/sdk","slug":"/playback/players-sdks/android/sdk/sdk-migration-guide","permalink":"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/android/sdk/sdk-migration-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/THEOplayer/documentation/blob/-/millicast/playback/players-sdks/android/sdk/sdk-migration-guide.mdx","tags":[],"version":"current","frontMatter":{"title":"Migration Guide"},"sidebar":"millicast","previous":{"title":"How-to Add Picture in Picture","permalink":"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/android/sdk/how-to-add-picture-in-picture"},"next":{"title":"Android Viewer","permalink":"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/android/samples/sample-apps-android-viewer"}}')},533057:function(e,t,r){r.d(t,{Y:()=>u,h:()=>l});var i=r(667294),n=r(616550),a=r(232e3),c=r(4520),s=r(38341),o=r(768737);function l(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function d(e){let{value:t,tabValues:r}=e;return r.some(e=>e.value===t)}function u(e){let{defaultValue:t,queryString:r=!1,groupId:u}=e,h=function(e){let{values:t,children:r}=e;return(0,i.useMemo)(()=>{let e=t??l(r).map(e=>{let{props:{value:t,label:r,attributes:i,default:n}}=e;return{value:t,label:r,attributes:i,default:n}}),i=(0,s.lx)(e,(e,t)=>e.value===t.value);if(i.length>0)throw Error(`Docusaurus error: Duplicate values "${i.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[t,r])}(e),[m,b]=(0,i.useState)(()=>(function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:r}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}let i=r.find(e=>e.default)??r[0];if(!i)throw Error("Unexpected error: 0 tabValues");return i.value})({defaultValue:t,tabValues:h})),[p,f]=function(e){let{queryString:t=!1,groupId:r}=e,a=(0,n.k6)(),s=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,c._X)(s),(0,i.useCallback)(e=>{if(!s)return;let t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})},[s,a])]}({queryString:r,groupId:u}),[v,k]=function(e){let{groupId:t}=e,r=t?`docusaurus.tab.${t}`:null,[n,a]=(0,o.Nk)(r);return[n,(0,i.useCallback)(e=>{r&&a.set(e)},[r,a])]}({groupId:u}),g=(()=>{let e=p??v;return d({value:e,tabValues:h})?e:null})();return(0,a.Z)(()=>{g&&b(g)},[g]),{selectedValue:m,selectValue:(0,i.useCallback)(e=>{if(!d({value:e,tabValues:h}))throw Error(`Can't select invalid tab value=${e}`);b(e),f(e),k(e)},[f,k,h]),tabValues:h}}},587244:function(e,t,r){r.d(t,{Z:()=>i});let i={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"}},603859:function(e,t,r){r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>b,frontMatter:()=>l,metadata:()=>i,toc:()=>h});var i=r(341922),n=r(785893),a=r(250065),c=r(308193),s=r(292415),o=r(696880);let l={title:"Migration Guide"},d="Migration Guide for Android SDK",u={},h=[...o.d$,{value:"1.8.x to 2.x",id:"18x-to-2x",level:2},{value:"Subscribing Single Source Streams",id:"subscribing-single-source-streams",level:3},{value:"Subscribing Multi-View Streams",id:"subscribing-multi-view-streams",level:3},{value:"Some key differences in track management",id:"some-key-differences-in-track-management",level:4},{value:"Changelog Overview",id:"changelog-overview",level:3}];function m(e){let t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"migration-guide-for-android-sdk",children:"Migration Guide for Android SDK"})}),"\n",(0,n.jsx)(t.p,{children:"This migration guide provides some tips for upgrading or downgrading between releases of the Android SDK."}),"\n","\n",(0,n.jsx)(o.ZP,{}),"\n",(0,n.jsx)(t.h2,{id:"18x-to-2x",children:"1.8.x to 2.x"}),"\n",(0,n.jsxs)(t.p,{children:["Below you'll find examples for migrating your applications from ",(0,n.jsx)(t.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v1.8.9",children:"v1.8.9"})," to ",(0,n.jsx)(t.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v2.0.0",children:"v2.0.0"})," of the ",(0,n.jsx)(t.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/android/sdk/",children:"Android"})," SDK."]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.em,{children:"NOTE:"})})," Publisher classes remain unchanged and do not require any migration."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"subscribing-single-source-streams",children:"Subscribing Single Source Streams"}),"\n",(0,n.jsx)(t.p,{children:"For applications that only have a single source available for playback, track management has changed."}),"\n",(0,n.jsxs)(c.Z,{children:[(0,n.jsx)(s.default,{value:"1.8.x",label:"1.8.x",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-kotlin",children:'Core.initialize()\n\nval subscriber = Core.createSubscriber()\n\nlaunch {\n  subscriber.state.map { it.connectionState }.distinctUntilChanged().collect {\n    if (it == SubscriberConnectionState.Connected) {\n      subscriber.subscribe()\n    }\n  }\n}\n\nlaunch {\n  subscriber.track.collect { trackHolder ->\n    when(trackHolder) {\n      is TrackHolder.VideoTrackHolder -> {\n        // Create the renderer:\n        val view = com.millicast.video.TextureViewRenderer(applicationContext)\n        // Add the renderer to the layout:\n        val layout = findViewById<LinearLayout>(R.id.linear_layout_video)\n        layout.addView(view)\n        // Set the renderer as a sink on the video track:\n        trackHolder.videoTrack.setVideoSink(view)\n      }\n      is TrackHolder.AudioTrackHolder -> {\n        // No video, ignore\n      }\n    }\n}\n\nlaunchDefaultScope {\n  val credentials = Credential(\n    streamName = "STREAM_NAME",\n    accountId = "ACCOUNT_ID",\n    apiUrl = "https://director.millicast.com/api/director/subscribe"\n  )\n\n  subscriber.setCredentials(credentials)\n  subscriber.connect()\n}\n'})})}),(0,n.jsx)(s.default,{value:"2.x",label:"2.x",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-kotlin",children:'Core.initialize()\n\nval subscriber = Core.createSubscriber()\n\nlaunch {\n    subscriber.state.map { it.connectionState }.distinctUntilChanged().collect {\n        if (it == SubscriberConnectionState.Connected) {\n            subscriber.subscribe()\n        }\n    }\n}\n\nlaunch {\n  subscriber.onRemoteTrack.collect { trackHolder ->\n      when (trackHolder) {\n          is RemoteAudioTrack -> {\n            trackHolder.enableAsync()\n          }\n\n          is RemoteVideoTrack -> {\n            trackHolder.enableAsync {videoSink = <The TextureViewRenderer View>}\n          }\n      }\n  }\n}\n\nlaunchDefaultScope {\n    val credentials = Credential(\n        streamName = "STREAM_NAME",\n        accountId = "ACCOUNT_ID",\n        apiUrl = "https://director.millicast.com/api/director/subscribe"\n    )\n\n    subscriber.setCredentials(credentials)\n    subscriber.connect()\n}\n'})})})]}),"\n",(0,n.jsxs)(t.p,{children:["Video view renderer using ",(0,n.jsx)(t.code,{children:"TextureViewRenderer"})," remains the same in 2.0.0."]}),"\n",(0,n.jsx)(t.h3,{id:"subscribing-multi-view-streams",children:"Subscribing Multi-View Streams"}),"\n",(0,n.jsx)(t.p,{children:"There were a lot of complicated steps involved in projecting the sources for a multi-stream view. This complex workflow requires a lot of understanding of the WebRTC remote tracks. Using the new 2.0.0 implementation removes the need to handle sourceIds, mids and the projection data directly. This solves a lot of complexities from the old implementation."}),"\n",(0,n.jsxs)(c.Z,{children:[(0,n.jsx)(s.default,{value:"1.8.x",label:"1.8.x",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-kotlin",children:'//Using the multi-source feature requires projecting tracks into a specified transceiver using its media ID (mid). When you start subscribing, you will receive the activity flow updates. To forward the selected media to the subscriber, use the project method of the subscriber. It requires providing the source ID you are targeting and an array of the tracks you want to project. And for more advanced cases, you may need to unproject and project tracks again. So you have to store a map of <sourceId, RemoteTrackHolder> for later usage. To achieve this you should listen to the StreamSourceActivity flow, then for every new track add only the new tracks to this stored map. Which is a big effort to do and a lot of stuff to worry about, as an example WHEN to re-init this map and etc.\n\nCore.initialize()\n\nval subscriber = Core.createSubscriber()\n\nlaunch {\n    subscriber.state.map { it.connectionState }.distinctUntilChanged().collect {\n        if (it == SubscriberConnectionState.Connected) {\n            subscriber.subscribe()\n        }\n    }\n}\n\n// Initialize the local items important for this local sample\nval streamIdMap = mutableMapOf<String, StreamSourceActivity>()\nval queue = Queue()\n// com.millicast.utils.Queue provides a scope.launch { } that will wait\n// for its head to complete before calling the next item\n\n/**\n * Retrieve the list of new tracks given modifications on the StreamSourceActivity object\n */\nfun checkTracksInStreamSourceActivity(streamSourceActivity: StreamSourceActivity): StreamSourceActivity {\n  // First, ensure that you find a corresponding cached version\n  streamIdMap.putIfAbsent(\n    streamSourceActivity.streamId,\n    streamSourceActivity.copy(activeTracks = emptyArray())\n  )\n\n  val cached = streamIdMap[streamSourceActivity.streamId]!!\n\n  // All the new tracks, for example each track that is in the new array but not the previous\n  val newTracks = streamSourceActivity.activeTracks.filter { activeTrack ->\n    null == cached.activeTracks.find { it.trackId == activeTrack.trackId }\n  }\n\n  // Send a copy that contains only the new tracks\n  return streamSourceActivity.copy(activeTracks = newTracks.toTypedArray())\n}\n\n/**\n * When a new source becomes active, store information about it, create a local track,\n * and send the projection command\n */\nlaunch {\n  subscriber.state.map { it.streamSourceActivities }.collect { streamSourceActivities ->\n    queue.post {\n      // Check whether the list of activity or tracks\n      // is empty, which means that everything local needs to be flushed\n\n      streamSourceActivities.map { activity ->\n        // Fetch a copy of the activity object containing only the new tracks\n        val newlyFoundRemoteTracks = checkTracksInStreamSourceActivity(activity)\n\n        // Update the cached list of activeTracks with the one obtained at the beginning\n        streamIdMap[activity.streamId] = streamIdMap[activity.streamId]!!.copy(\n          activeTracks = activity.activeTracks\n        )\n\n        newlyFoundRemoteTracks\n      }.forEach { activity ->\n        // The activity only contains the newly added tracks\n        activity.activeTracks.forEach {\n          // You can add the remote track locally\n          val newlyAddedLocalTrack = subscriber.addRemoteTrackForResult(it.media)\n\n          // Send the command to project the remote content locally\n          subscriber.project(\n            activity.sourceId, arrayListOf(\n              ProjectionData(\n                trackId = it.trackId,\n                media = it.media.name.lowercase(),\n                mid = newlyAddedLocalTrack.mid!!\n              )\n            )\n          )\n        }\n      }\n    }\n  }\n}\n\nlaunchDefaultScope {\n    val credentials = Credential(\n        streamName = "STREAM_NAME",\n        accountId = "ACCOUNT_ID",\n        apiUrl = "https://director.millicast.com/api/director/subscribe"\n    )\n\n    subscriber.setCredentials(credentials)\n    subscriber.connect()\n}\n'})})}),(0,n.jsx)(s.default,{value:"2.x",label:"2.x",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-kotlin",children:'Core.initialize()\n\nval subscriber = Core.createSubscriber()\n\nlaunch {\n    subscriber.state.map { it.connectionState }.distinctUntilChanged().collect {\n        if (it == SubscriberConnectionState.Connected) {\n            subscriber.subscribe()\n        }\n    }\n}\n\nlaunch {\n  subscriber.onRemoteTrack.collect { trackHolder ->\n      when (trackHolder) {\n          is RemoteAudioTrack -> {\n            trackHolder.enableAsync()\n          }\n\n          is RemoteVideoTrack -> {\n            trackHolder.enableAsync {videoSink = <The TextureViewRenderer View>}\n\n            trackHolder.onState.collectInLocalScope { trackState ->\n                if (!trackState.isActive) {\n                    // Either call trackHolder.disableAsync() and remove the video renderer view or show an UI message till source comes back online\n                }\n            }\n          }\n      }\n  }\n}\n\nlaunchDefaultScope {\n    val credentials = Credential(\n        streamName = "STREAM_NAME",\n        accountId = "ACCOUNT_ID",\n        apiUrl = "https://director.millicast.com/api/director/subscribe"\n    )\n\n    subscriber.setCredentials(credentials)\n    subscriber.connect()\n}\n'})})})]}),"\n",(0,n.jsx)(t.p,{children:"The new 2.0.0 implementation for multi-stream is identical to the single stream view."}),"\n",(0,n.jsx)(t.h4,{id:"some-key-differences-in-track-management",children:"Some key differences in track management"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"1.8.x"}),(0,n.jsx)(t.th,{children:"2.x"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["Track event emitted is of type ",(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/1.8.9/android/android/com.millicast/-subscriber/tracks.html",children:"TrackHolder"})," which has two types ",(0,n.jsx)(t.code,{children:"AudioTrackHolder(mid: String, audioTrack: AudioTrack)"})," and ",(0,n.jsx)(t.code,{children:"VideoTrackHolder(mid: String, videoTrack: VideoTrack)"})]}),(0,n.jsxs)(t.td,{children:["Track event emits RemoteTrack. This new track type can be a video or audio track, using ",(0,n.jsx)(t.code,{children:"is RemoteVideoTrack"})," you can verify if it\u2019s a video track. Use ",(0,n.jsx)(t.code,{children:"is RemoteAudioTrack"})," to check if the track is an audio track."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["Enabling(projecting) tracks is a multistep process ",(0,n.jsx)("br",{}),"- Subscribe to ",(0,n.jsx)(t.code,{children:"SubscriberState.streamSourceActivity"})," flow to collect active and inactive sourceId\u2019s ",(0,n.jsx)("br",{}),"- Receive active tracks using ",(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/1.8.9/android/android/com.millicast/-subscriber/state.html",children:"activeTracks"})," async stream ",(0,n.jsx)("br",{}),"- Request tracks by calling the ",(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/1.8.9/android/android/com.millicast/-subscriber/add-remote-track.html",children:"addRemoteTrack()/addRemoteTrackForResult()"})," function ",(0,n.jsx)("br",{}),"- Project mid\u2019s using the ",(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/1.8.9/android/android/com.millicast/-subscriber/project.html",children:"project()"})," API by passing in the ",(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/1.8.9/android/android/com.millicast.subscribers/-projection-data/index.html",children:"ProjectionData"})]}),(0,n.jsxs)(t.td,{children:["Enabling tracks is now easy ",(0,n.jsx)("br",{}),"- Collect tracks using the ",(0,n.jsx)(t.code,{children:"onRemoteTrack"})," flow ",(0,n.jsx)("br",{}),"- Enable track by calling the ",(0,n.jsx)(t.code,{children:"enableAsync()"})," for an audio track or ",(0,n.jsx)(t.code,{children:"enableAsync(videoSink)"})," API for a video track"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["Disable(unproject) tracks using the ",(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/1.8.9/android/android/com.millicast/-subscriber/unproject.html",children:"unproject(mids)"})," function"]}),(0,n.jsxs)(t.td,{children:["Disable tracks using the ",(0,n.jsx)(t.code,{children:"disableAsync()"}),"function"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/1.8.9/android/android/com.millicast/-subscriber/layers.html",children:"layers"})," flow is part of Subscriber"]}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"layers"})," flow is now part of RemoteTrack"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:["To select a layer create a new ",(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/1.8.9/android/android/com.millicast.subscribers/-projection-data/index.html",children:"ProjectionData"}),", set the appropriate ",(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/1.8.9/android/android/com.millicast.subscribers.state/-layer-data/index.html",children:"layerData"})," and then call ",(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/1.8.9/android/android/com.millicast/-subscriber/project.html",children:"project()"})]}),(0,n.jsxs)(t.td,{children:["To select a layer call the ",(0,n.jsx)(t.code,{children:"enableAsync()"})," function and pass the ",(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/latest/android/android/com.millicast.subscribers.state/-layer-data-selection/index.html",children:"LayerDataSelection"})," to select"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.a,{href:"https://millicast.github.io/doc/1.8.9/android/android/com.millicast/-subscriber/activity.html",children:"activity"})," flow was part of the Subscriber. ",(0,n.jsx)(t.code,{children:"ActivityStream.Inactive"})," event for a particular ",(0,n.jsx)(t.code,{children:"sourceId"})," indicates the tracks associated with that sourceId are now inactive and ",(0,n.jsx)(t.code,{children:"ActivityStream.Active"})," event represents the tracks associated with the ",(0,n.jsx)(t.code,{children:"sourceId"})," in the event is now active"]}),(0,n.jsxs)(t.td,{children:[(0,n.jsx)(t.code,{children:"isActive"})," is now part of the ",(0,n.jsx)(t.code,{children:"Subscriber.onRemoteTrack"}),"."]})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"changelog-overview",children:"Changelog Overview"}),"\n",(0,n.jsxs)(t.p,{children:["Please refer to the changelog for ",(0,n.jsx)(t.a,{href:"https://github.com/millicast/millicast-native-sdk/releases/tag/v2.0.0",children:"What's new in 2.0.0 SDK Release"})]})]})}function b(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},696880:function(e,t,r){r.d(t,{ZP:()=>s,d$:()=>a});var i=r(785893),n=r(250065);let a=[];function c(e){let t={a:"a",admonition:"admonition",p:"p",...(0,n.a)(),...e.components};return(0,i.jsx)(t.admonition,{title:"Getting Started with Android SDK",type:"tip",children:(0,i.jsxs)(t.p,{children:["If you haven't already, begin by following the ",(0,i.jsx)(t.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/android/sdk/getting-started-with-subscribing",children:"Getting Started"})," tutorial to become familiar with the concepts to create an application that can publish and/or subscribe using the ",(0,i.jsx)(t.a,{href:"/documentation/pr-preview/pr-325/millicast/playback/players-sdks/android/sdk/",children:"Android"})," SDK."]})})}function s(e={}){let{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);