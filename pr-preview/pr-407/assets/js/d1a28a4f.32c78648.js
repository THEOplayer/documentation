"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["28277"],{525054:function(e,t,n){n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>h});var r=n(956310),i=n(785893),s=n(250065),l=n(308193),a=n(292415);let o={title:"Redundant Ingest",sidebar_position:10},d=void 0,c={},h=[{value:"Recovery mechanism",id:"recovery-mechanism",level:2},{value:"Publishing redundant feeds using RTMP or SRT",id:"publishing-redundant-feeds-using-rtmp-or-srt",level:2},{value:"1. Establish your broadcasting plan",id:"1-establish-your-broadcasting-plan",level:3},{value:"2. Create a publish token",id:"2-create-a-publish-token",level:3},{value:"3. Choose the preferred cluster regions",id:"3-choose-the-preferred-cluster-regions",level:3},{value:"4. Set priorities",id:"4-set-priorities",level:3},{value:"5. Start broadcasting",id:"5-start-broadcasting",level:3},{value:"Publishing redundant feeds using the dashboard, Client SDKs, or WHIP",id:"publishing-redundant-feeds-using-the-dashboard-client-sdks-or-whip",level:2},{value:"1. Establish your broadcasting plan",id:"1-establish-your-broadcasting-plan-1",level:3},{value:"2. Create a publish token",id:"2-create-a-publish-token-1",level:3},{value:"3. Choose the preferred cluster regions",id:"3-choose-the-preferred-cluster-regions-1",level:3},{value:"4. Set priorities",id:"4-set-priorities-1",level:3},{value:"5. Start broadcasting",id:"5-start-broadcasting-1",level:3},{value:"Cost calculation",id:"cost-calculation",level:2}];function u(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"To provide a resilient and reliable streaming experience, the Dolby.io Streaming platform allows broadcasting multiple redundant contribution streams. This solution ensures seamless content delivery to viewers, even in the case of unexpected technical issues."}),"\n",(0,i.jsx)(t.h2,{id:"recovery-mechanism",children:"Recovery mechanism"}),"\n",(0,i.jsx)(t.p,{children:"To ensure that streamed content will be delivered to viewers, you have to consider the potential problems that may affect broadcasting, such as equipment malfunctions or service interruptions caused by technical glitches or network failures. To avoid such problems during an important event, consider using multiple layers of redundancy including encoders, internet service providers (ISPs), and publishing regions offered by Streaming APIs. Using Dolby.io Streaming, you can publish additional redundant streams, which will be automatically delivered to viewers in the case of a problem with the original stream. For example, in the case of a malfunctioning encoder in the primary broadcast, the platform can seamlessly continue the broadcast as long as there is another live contribution stream that uses a different encoder."}),"\n",(0,i.jsxs)(t.p,{children:["When publishing multiple backup feeds, you can establish an order in which the streams should fail over. The Dolby.io Streaming platform provides the ",(0,i.jsx)(t.strong,{children:"priority"})," parameter that lets you set the priority of each contribution stream. In the case of any problem with the primary stream, viewers receive the available stream that has the ",(0,i.jsx)(t.em,{children:"highest"})," priority. Not setting any ",(0,i.jsx)(t.code,{children:"priority"})," is equivalent setting the lowest priority to that stream."]}),"\n",(0,i.jsx)(t.p,{children:"The following instructions explain how to publish redundant streams using Streaming APIs."}),"\n",(0,i.jsx)(t.admonition,{title:"Geo-cascading Settings",type:"tip",children:(0,i.jsxs)(t.p,{children:["Be aware that all publishers that contribute to the same stream must have the same ",(0,i.jsx)(t.a,{href:"/documentation/pr-preview/pr-407/millicast/distribution/multi-region-support/geo-cascading",children:"geo-cascading"})," settings."]})}),"\n",(0,i.jsx)(t.h2,{id:"publishing-redundant-feeds-using-rtmp-or-srt",children:"Publishing redundant feeds using RTMP or SRT"}),"\n",(0,i.jsx)(t.p,{children:"Follow this procedure to broadcast multiple redundant feeds and provide a reliable streaming experience using RTMP or SRT."}),"\n",(0,i.jsx)(t.h3,{id:"1-establish-your-broadcasting-plan",children:"1. Establish your broadcasting plan"}),"\n",(0,i.jsx)(t.p,{children:"Decide how many layers of redundancy you want for a given source. Usually 2 is sufficient for high value streams."}),"\n",(0,i.jsx)(t.h3,{id:"2-create-a-publish-token",children:"2. Create a publish token"}),"\n",(0,i.jsxs)(t.p,{children:["Open the dashboard and click the ",(0,i.jsx)(t.strong,{children:"Create"})," button to create a new token."]}),"\n",(0,i.jsxs)(t.p,{children:["Make sure that ",(0,i.jsx)(t.a,{href:"/documentation/pr-preview/pr-407/millicast/distribution/multi-region-support/geo-cascading",children:"geo-cascading"})," is also configured the same across both primary and fallback backup feeds."]}),"\n",(0,i.jsx)(t.h3,{id:"3-choose-the-preferred-cluster-regions",children:"3. Choose the preferred cluster regions"}),"\n",(0,i.jsxs)(t.p,{children:["Select your token name to open token details and locate the ",(0,i.jsx)(t.strong,{children:"Settings"})," section. Choose the preferred ",(0,i.jsx)(t.strong,{children:"Cluster region"})," from the drop-down list. Selecting a cluster changes the domain name in the publish path. We recommend choosing two different regions in the same geographical area: the closest region to the publisher as the primary region and the farther region as the backup. To use two cluster regions, use two publish paths, one for each region you want to use."]}),"\n",(0,i.jsx)(t.h3,{id:"4-set-priorities",children:"4. Set priorities"}),"\n",(0,i.jsxs)(t.p,{children:["Use the ",(0,i.jsx)(t.strong,{children:"priority"})," query parameter to define the order in which your contribution streams should be selected. To set the parameter, add ",(0,i.jsx)(t.code,{children:"&priority=X"})," as publishing parameters to your publish URL. The higher value will be streamed to viewers first."]}),"\n",(0,i.jsxs)(t.p,{children:["For example, if your publish URL is ",(0,i.jsx)(t.code,{children:"{StreamName}?token={Token}&sourceId=1"}),", after adding the priority parameter with a value of 1 you should have the following string: ",(0,i.jsx)(t.code,{children:"{StreamName}?token={Token}&sourceId=1&priority=1"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["If you use Multi-bitrate (MBR) contribution where you encode your layers from the studio or video operations center with Redundant Ingest, you need to assign ",(0,i.jsx)(t.code,{children:"priority"})," and ",(0,i.jsx)(t.code,{children:"sourceId"})," as presented in the following example:"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Content"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"SourceId"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Priority"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Result"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Video 1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1low"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"100"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"primary"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Video 1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1medium"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"100"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"primary"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Video 1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1high"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"100"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"primary"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Video 1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1low"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"backup"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Video 1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1medium"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"backup"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Video 1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1high"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"backup"})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Notes"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"sourceId"})," needs to be distinct within the MBR group for each layer but match between your primary and your backup"]}),"\n",(0,i.jsxs)(t.li,{children:["If using MBR and ",(0,i.jsx)(t.em,{children:"multi-source"})," contribution, your ",(0,i.jsx)(t.code,{children:"simulcastId"}),"s and ",(0,i.jsx)(t.code,{children:"sourceId"}),"s need to be consistent between primary and backup grouping. More on how to do MBR and Multi-source contribution can be found in our ",(0,i.jsx)(t.a,{href:"/documentation/pr-preview/pr-407/millicast/multi-source-builder",children:"Multi-Source builder guide"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"5-start-broadcasting",children:"5. Start broadcasting"}),"\n",(0,i.jsx)(t.p,{children:"Start broadcasting the original feed and all backup feeds. In the case the source disconnects, viewers will be automatically switched over to receive the backup feed that has the next highest priority. The switchover duration varies depending on the used broadcast protocol."}),"\n",(0,i.jsx)(t.h2,{id:"publishing-redundant-feeds-using-the-dashboard-client-sdks-or-whip",children:"Publishing redundant feeds using the dashboard, Client SDKs, or WHIP"}),"\n",(0,i.jsx)(t.p,{children:"Follow this procedure to broadcast multiple redundant streams and provide a reliable streaming experience using the dashboard, a Client SDK, or WHIP."}),"\n",(0,i.jsx)(t.h3,{id:"1-establish-your-broadcasting-plan-1",children:"1. Establish your broadcasting plan"}),"\n",(0,i.jsx)(t.p,{children:"Decide how many layers of redundancy you want for a given con."}),"\n",(0,i.jsx)(t.h3,{id:"2-create-a-publish-token-1",children:"2. Create a publish token"}),"\n",(0,i.jsxs)(t.p,{children:["Open the dashboard and click the ",(0,i.jsx)(t.strong,{children:"Create"})," button to create a new token. If you want to use two cluster regions, create two tokens."]}),"\n",(0,i.jsxs)(t.p,{children:["Make sure that ",(0,i.jsx)(t.a,{href:"/documentation/pr-preview/pr-407/millicast/distribution/multi-region-support/geo-cascading",children:"geo-cascading"})," is also configured the same across both primary and fallback redundant backup feeds."]}),"\n",(0,i.jsx)(t.h3,{id:"3-choose-the-preferred-cluster-regions-1",children:"3. Choose the preferred cluster regions"}),"\n",(0,i.jsxs)(t.p,{children:["Select your token name to open token details and locate the ",(0,i.jsx)(t.strong,{children:"Settings"})," section. Choose the preferred ",(0,i.jsx)(t.strong,{children:"Cluster region"})," from the drop-down list. If you want to use two clusters, additionally open the details of the second token and select a different cluster from the list."]}),"\n",(0,i.jsx)(t.h3,{id:"4-set-priorities-1",children:"4. Set priorities"}),"\n",(0,i.jsxs)(t.p,{children:["Use the ",(0,i.jsx)(t.strong,{children:"priority"})," parameter to define the order in which your contribution streams should be selected. To set the parameter, add ",(0,i.jsx)(t.code,{children:"&priority=X"})," as publishing parameters to your publish URL. The higher value will be streamed to viewers first."]}),"\n",(0,i.jsx)(t.p,{children:"If you use Simulcast with Redundant Ingest, you can assign priorities and sourceId as presented in the following example:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Content"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"SourceId"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Priority"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Result"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Video 1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"100"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Primary"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Video 1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"1"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Backup"})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:["If you use the dashboard, open the ",(0,i.jsx)(t.a,{href:"/documentation/pr-preview/pr-407/millicast/how-to-broadcast-in-dashboard",children:"Streaming Dashboard Broadcaster"})," and click the gear icon to open ",(0,i.jsx)(t.strong,{children:"Media Settings"}),". Set the ",(0,i.jsx)(t.strong,{children:"Priority"})," parameter to a preferred value and click ",(0,i.jsx)(t.strong,{children:"Update"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["If you use WHIP, set the ",(0,i.jsx)(t.strong,{children:"priority"})," query parameter by adding ",(0,i.jsx)(t.code,{children:"&priority=X"})," at the end of your publish URL, where X is the preferred priority. For example, if your publish URL is ",(0,i.jsx)(t.code,{children:"{StreamName}?token={Token}&sourceId=1"}),", after adding the priority parameter with a value of 1 you should have the following string: ",(0,i.jsx)(t.code,{children:"{StreamName}?token={Token}&sourceId=1&priority=1"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["If you use a Client SDK, set the optional ",(0,i.jsx)(t.strong,{children:"priority"})," parameter in publisher options, as in the following examples:"]}),"\n","\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(a.default,{value:"cpp",label:"C++",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"millicast::Publisher::Option options;\noptions.priority = 1;\npublisher->connect();\n// Wait for the on_connected callback\npublisher->publish(options);\n"})})}),(0,i.jsx)(a.default,{value:"java",label:"Android",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"Publisher.Option publisherOption = new Publisher.Option();\npublisherOption.priority = 1;\npublisher.connect();\n// Wait for the onConnected callback\npublisher.publish(publisherOption);\n"})})}),(0,i.jsx)(a.default,{value:"swift",label:"iOS",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",children:"let publisherOptions = MCClientOptions()\npublisherOptions.priority = 1\npublisher!.connect()\n// Wait for the onConnected callback\npublisher!.publish(with: publisherOptions)\n"})})}),(0,i.jsx)(a.default,{value:"javascript",label:"Web SDK",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const publishOptions = {\n  // Other preferred options\n  priority: 1,\n};\n\n// Start publishing a stream\ntry {\n  await publisher.connect(publishOptions);\n} catch (e) {\n  console.error('Connection failed, handle error', e);\n}\n"})})})]}),"\n",(0,i.jsx)(t.h3,{id:"5-start-broadcasting-1",children:"5. Start broadcasting"}),"\n",(0,i.jsx)(t.p,{children:"Start broadcasting the original feed and all backup feeds. In the case the source disconnects, viewers will be automatically switched over to receive the backup feed that has the next highest priority. The switchover duration varies depending on the used broadcast protocol."}),"\n",(0,i.jsx)(t.h2,{id:"cost-calculation",children:"Cost calculation"}),"\n",(0,i.jsx)(t.p,{children:"Pricing is determined based on bandwidth consumption, so each feed is billed independently. For playback, only one feed is distributed, so only data sent to the viewer count as usage, regardless of the number of redundant feeds."}),"\n",(0,i.jsxs)(t.p,{children:["If you have any questions or suggestions, feel free to ",(0,i.jsx)(t.a,{href:"https://support.dolby.io/",children:"contact us"}),"."]})]})}function p(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},161748:function(e,t,n){n.d(t,{Z:()=>r});let r={tabItem:"tabItem_Ymn6"}},587244:function(e,t,n){n.d(t,{Z:()=>r});let r={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"}},292415:function(e,t,n){n.r(t),n.d(t,{default:()=>l});var r=n(785893);n(667294);var i=n(467026),s=n(161748);function l(e){let{children:t,hidden:n,className:l}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.Z)(s.Z.tabItem,l),hidden:n,children:t})}},308193:function(e,t,n){n.d(t,{Z:()=>p});var r=n(785893),i=n(667294),s=n(467026),l=n(69599),a=n(533057),o=n(7227),d=n(587244);function c(e){let{className:t,block:n,selectedValue:i,selectValue:a,tabValues:o}=e,c=[],{blockElementScrollPositionUntilNextRender:h}=(0,l.o5)(),u=e=>{let t=e.currentTarget,n=o[c.indexOf(t)].value;n!==i&&(h(t),a(n))},p=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{let n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{let n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1]}}t?.focus()};return(0,r.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t),children:o.map(e=>{let{value:t,label:n,attributes:l}=e;return(0,r.jsx)("li",{role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,ref:e=>{c.push(e)},onKeyDown:p,onClick:u,...l,className:(0,s.Z)("tabs__item",d.Z.tabItem,l?.className,{"tabs__item--active":i===t}),children:n??t},t)})})}function h(e){let{lazy:t,children:n,selectedValue:l}=e,a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){let e=a.find(e=>e.props.value===l);return e?(0,i.cloneElement)(e,{className:(0,s.Z)("margin-top--md",e.props.className)}):null}return(0,r.jsx)("div",{className:"margin-top--md",children:a.map((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==l}))})}function u(e){let t=(0,a.Y)(e);return(0,r.jsxs)("div",{className:(0,s.Z)("tabs-container",d.Z.tabList),children:[(0,r.jsx)(c,{...t,...e}),(0,r.jsx)(h,{...t,...e})]})}function p(e){let t=(0,o.default)();return(0,r.jsx)(u,{...e,children:(0,a.h)(e.children)},String(t))}},533057:function(e,t,n){n.d(t,{Y:()=>h,h:()=>d});var r=n(667294),i=n(616550),s=n(232e3),l=n(4520),a=n(38341),o=n(768737);function d(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){let{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function c(e){let{value:t,tabValues:n}=e;return n.some(e=>e.value===t)}function h(e){let{defaultValue:t,queryString:n=!1,groupId:h}=e,u=function(e){let{values:t,children:n}=e;return(0,r.useMemo)(()=>{let e=t??d(n).map(e=>{let{props:{value:t,label:n,attributes:r,default:i}}=e;return{value:t,label:n,attributes:r,default:i}}),r=(0,a.lx)(e,(e,t)=>e.value===t.value);if(r.length>0)throw Error(`Docusaurus error: Duplicate values "${r.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[t,n])}(e),[p,b]=(0,r.useState)(()=>(function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}let r=n.find(e=>e.default)??n[0];if(!r)throw Error("Unexpected error: 0 tabValues");return r.value})({defaultValue:t,tabValues:u})),[g,f]=function(e){let{queryString:t=!1,groupId:n}=e,s=(0,i.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(a),(0,r.useCallback)(e=>{if(!a)return;let t=new URLSearchParams(s.location.search);t.set(a,e),s.replace({...s.location,search:t.toString()})},[a,s])]}({queryString:n,groupId:h}),[m,x]=function(e){let{groupId:t}=e,n=t?`docusaurus.tab.${t}`:null,[i,s]=(0,o.Nk)(n);return[i,(0,r.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:h}),y=(()=>{let e=g??m;return c({value:e,tabValues:u})?e:null})();return(0,s.Z)(()=>{y&&b(y)},[y]),{selectedValue:p,selectValue:(0,r.useCallback)(e=>{if(!c({value:e,tabValues:u}))throw Error(`Can't select invalid tab value=${e}`);b(e),f(e),x(e)},[f,x,u]),tabValues:u}}},250065:function(e,t,n){n.d(t,{Z:()=>a,a:()=>l});var r=n(667294);let i={},s=r.createContext(i);function l(e){let t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:t},e.children)}},956310:function(e){e.exports=JSON.parse('{"id":"broadcast/redundant-ingest/index","title":"Redundant Ingest","description":"To provide a resilient and reliable streaming experience, the Dolby.io Streaming platform allows broadcasting multiple redundant contribution streams. This solution ensures seamless content delivery to viewers, even in the case of unexpected technical issues.","source":"@site/millicast/broadcast/redundant-ingest/index.mdx","sourceDirName":"broadcast/redundant-ingest","slug":"/broadcast/redundant-ingest/","permalink":"/documentation/pr-preview/pr-407/millicast/broadcast/redundant-ingest/","draft":false,"unlisted":false,"editUrl":"https://github.com/THEOplayer/documentation/blob/-/millicast/broadcast/redundant-ingest/index.mdx","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Redundant Ingest","sidebar_position":10},"sidebar":"millicast","previous":{"title":"Multi-Source Broadcasting","permalink":"/documentation/pr-preview/pr-407/millicast/broadcast/multi-source-broadcasting"},"next":{"title":"High Availability Management","permalink":"/documentation/pr-preview/pr-407/millicast/broadcast/redundant-ingest/high-availability-management"}}')}}]);