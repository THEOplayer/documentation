"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["84077"],{696880:function(e,i,n){n.d(i,{ZP:()=>d,d$:()=>a});var t=n(785893),o=n(250065);let a=[];function r(e){let i={a:"a",admonition:"admonition",p:"p",...(0,o.a)(),...e.components};return(0,t.jsx)(i.admonition,{title:"Getting Started with Android SDK",type:"tip",children:(0,t.jsxs)(i.p,{children:["If you haven't already, begin by following the ",(0,t.jsx)(i.a,{href:"/documentation/pr-preview/pr-365/millicast/playback/players-sdks/android/sdk/getting-started-with-subscribing",children:"Getting Started"})," tutorial to become familiar with the concepts to create an application that can publish and/or subscribe using the ",(0,t.jsx)(i.a,{href:"/documentation/pr-preview/pr-365/millicast/playback/players-sdks/android/sdk/",children:"Android"})," SDK."]})})}function d(e={}){let{wrapper:i}={...(0,o.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},293983:function(e,i,n){n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>p});var t=n(864520),o=n(785893),a=n(250065),r=n(942807),d=n(696880);let s={title:"How-to Add Picture in Picture"},l=void 0,c={},p=[...d.d$,{value:"1. Add a Centralized PipViewModel",id:"1-add-a-centralized-pipviewmodel",level:2},{value:"2. Enable/Disable PiP mode from different screens",id:"2-enabledisable-pip-mode-from-different-screens",level:3},{value:"3. Add a utility function to enable PiP mode",id:"3-add-a-utility-function-to-enable-pip-mode",level:3},{value:"4. Add a utility function to check if the app is in PiP mode",id:"4-add-a-utility-function-to-check-if-the-app-is-in-pip-mode",level:3},{value:"5. Setup your Activity to use PiP",id:"5-setup-your-activity-to-use-pip",level:3},{value:"6. Use the utility functions in your root composable",id:"6-use-the-utility-functions-in-your-root-composable",level:3}];function u(e){let i={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.strong,{children:"Picture-in-Picture (PiP)"})," was introduced with ",(0,o.jsx)(i.a,{href:"https://developer.android.com/develop/ui/views/picture-in-picture",children:"Android 8.0 (API level 26)"}),". This feature allows you to support a floating video frame that persists even when the user sends the application to the background or switches to another application."]}),"\n","\n",(0,o.jsx)("div",{class:"center-container",children:(0,o.jsx)("img",{src:r.Z,width:"400"})}),"\n",(0,o.jsxs)(i.p,{children:["Refer to the ",(0,o.jsx)(i.a,{href:"https://github.com/dolbyio-samples/rts-app-android-viewer/tree/main/interactiveplayer",children:"Interactive Player"})," sample application to learn more about implementing the code needed for PiP feature in a fully functioning Android App."]}),"\n","\n",(0,o.jsx)(d.ZP,{}),"\n",(0,o.jsx)(i.h2,{id:"1-add-a-centralized-pipviewmodel",children:"1. Add a Centralized PipViewModel"}),"\n",(0,o.jsxs)(i.p,{children:["Create a ViewModel called ",(0,o.jsx)(i.code,{children:"PipViewModel"})," that manages the state of whether PiP mode is enabled or not. This ViewModel should expose a ",(0,o.jsx)(i.code,{children:"StateFlow"})," or a ",(0,o.jsx)(i.code,{children:"Flow"})," that emits the current state of PiP mode."]}),"\n",(0,o.jsx)(i.p,{children:"Here's an example implementation using Hilt for dependency injection:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:"@HiltViewModel\nclass PipViewModel @Inject constructor() : ViewModel() {\n    private val _isPipEnabled = MutableStateFlow(false)\n    val isPipEnabled = _isPipEnabled.asStateFlow()\n\n    fun enablePip(enable: Boolean) {\n        viewModelScope.launch {\n            _isPipEnabled.emit(enable)\n        }\n    }\n}\n"})}),"\n",(0,o.jsx)(i.h3,{id:"2-enabledisable-pip-mode-from-different-screens",children:"2. Enable/Disable PiP mode from different screens"}),"\n",(0,o.jsxs)(i.p,{children:["In the screens where you want to enable or disable PiP mode, inject the ",(0,o.jsx)(i.code,{children:"PipViewModel"})," and call the ",(0,o.jsx)(i.code,{children:"enablePip"})," method with the desired state."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:"@Composable\nfun ExampleScreen(pipViewModel: PipViewModel) {\n    // Disable PiP mode in this screen\n    pipViewModel.enablePip(false)\n    // ...\n}\n"})}),"\n",(0,o.jsx)(i.h3,{id:"3-add-a-utility-function-to-enable-pip-mode",children:"3. Add a utility function to enable PiP mode"}),"\n",(0,o.jsxs)(i.p,{children:["Create a utility ",(0,o.jsx)(i.code,{children:"@Composable"})," function that listens to the ",(0,o.jsx)(i.code,{children:"isPipEnabled"})," flow from the ",(0,o.jsx)(i.code,{children:"PipViewModel"})," and enters or exits PiP mode accordingly."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:"@Composable\nfun EnablePipMode(enablePipMode: Boolean, content: @Composable () -> Unit) {\n    val currentShouldEnterPipMode = rememberUpdatedState(newValue = enablePipMode)\n    val context = LocalContext.current\n\n    DisposableEffect(context) {\n        val onUserLeaveBehavior: () -> Unit = {\n            if (currentShouldEnterPipMode.value) {\n                context.findActivity()\n                    .enterPictureInPictureMode(PictureInPictureParams.Builder().build())\n            }\n        }\n\n        context.findActivity().addOnUserLeaveHintListener(onUserLeaveBehavior)\n\n        onDispose {\n            context.findActivity().removeOnUserLeaveHintListener(onUserLeaveBehavior)\n        }\n    }\n\n    content()\n}\n"})}),"\n",(0,o.jsx)(i.h3,{id:"4-add-a-utility-function-to-check-if-the-app-is-in-pip-mode",children:"4. Add a utility function to check if the app is in PiP mode"}),"\n",(0,o.jsxs)(i.p,{children:["Create a utility ",(0,o.jsx)(i.code,{children:"@Composable"})," function that checks if the app is currently in PiP mode or not. This function can be used in different composables to show or hide views based on the PiP mode."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:"@Composable\nfun rememberIsInPipMode(): Boolean {\n    val activity = LocalContext.current.findActivity()\n    var pipMode by remember { mutableStateOf(activity.isInPictureInPictureMode) }\n\n    DisposableEffect(activity) {\n        val observer = Consumer<PictureInPictureModeChangedInfo> { info ->\n            pipMode = info.isInPictureInPictureMode\n        }\n\n        activity.addOnPictureInPictureModeChangedListener(observer)\n\n        onDispose {\n            activity.removeOnPictureInPictureModeChangedListener(observer)\n        }\n    }\n\n    return pipMode\n}\n"})}),"\n",(0,o.jsx)(i.h3,{id:"5-setup-your-activity-to-use-pip",children:"5. Setup your Activity to use PiP"}),"\n",(0,o.jsxs)(i.p,{children:["In your ",(0,o.jsx)(i.code,{children:"AndroidManifest.xml"}),", add the following attributes to your Activity to enable PiP mode:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:'<activity\n    android:name=".MainActivity"\n    android:configChanges="orientation|screenLayout|screenSize|smallestScreenSize"\n    android:supportsPictureInPicture="true" />\n'})}),"\n",(0,o.jsx)(i.h3,{id:"6-use-the-utility-functions-in-your-root-composable",children:"6. Use the utility functions in your root composable"}),"\n",(0,o.jsxs)(i.p,{children:["In your root composable (e.g., MainScreen), use the ",(0,o.jsx)(i.code,{children:"EnablePipMode"})," and ",(0,o.jsx)(i.code,{children:"rememberIsInPipMode"})," functions to manage the PiP mode and show/hide views accordingly."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:"@Composable\nfun MainScreen(appViewModel: PipViewModel) {\n    val currentShouldEnterPipMode by appViewModel.isPipEnabled.collectAsStateWithLifecycle()\n    val inPipMode = rememberIsInPipMode()\n\n    EnablePipMode(enablePipMode = currentShouldEnterPipMode) {\n        // All app screens composable views\n        if (!inPipMode) {\n            // Show/hide your views\n        }\n    }\n}\n"})}),"\n",(0,o.jsxs)(i.p,{children:["By following these steps, you should be able to add Picture-In-Picture playback functionality to your application. The ",(0,o.jsx)(i.code,{children:"PipViewModel"})," manages the state of PiP mode, and you can enable or disable it from different screens. The utility functions handle entering and exiting PiP mode, as well as checking if the app is currently in PiP mode."]})]})}function h(e={}){let{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},942807:function(e,i,n){n.d(i,{Z:()=>t});let t=n.p+"assets/images/632bcf2c4c46320da939d2dcb89b95c15e2ba9c29826b7fb28d866c8-mobile-picture-in-picture-9985e78ef10631919ba2acb13c518574.png"},250065:function(e,i,n){n.d(i,{Z:()=>d,a:()=>r});var t=n(667294);let o={},a=t.createContext(o);function r(e){let i=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:i},e.children)}},864520:function(e){e.exports=JSON.parse('{"id":"playback/players-sdks/android/sdk/how-to-add-picture-in-picture","title":"How-to Add Picture in Picture","description":"Picture-in-Picture (PiP) was introduced with Android 8.0 (API level 26). This feature allows you to support a floating video frame that persists even when the user sends the application to the background or switches to another application.","source":"@site/millicast/playback/players-sdks/android/sdk/how-to-add-picture-in-picture.mdx","sourceDirName":"playback/players-sdks/android/sdk","slug":"/playback/players-sdks/android/sdk/how-to-add-picture-in-picture","permalink":"/documentation/pr-preview/pr-365/millicast/playback/players-sdks/android/sdk/how-to-add-picture-in-picture","draft":false,"unlisted":false,"editUrl":"https://github.com/THEOplayer/documentation/blob/-/millicast/playback/players-sdks/android/sdk/how-to-add-picture-in-picture.mdx","tags":[],"version":"current","frontMatter":{"title":"How-to Add Picture in Picture"},"sidebar":"millicast","previous":{"title":"Getting Started with Subscribing","permalink":"/documentation/pr-preview/pr-365/millicast/playback/players-sdks/android/sdk/getting-started-with-subscribing"},"next":{"title":"Migration Guide","permalink":"/documentation/pr-preview/pr-365/millicast/playback/players-sdks/android/sdk/sdk-migration-guide"}}')}}]);