"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["88629"],{7798:function(e,n,t){t.r(n),t.d(n,{default:()=>h,frontMatter:()=>d,metadata:()=>i,assets:()=>a,toc:()=>c,contentTitle:()=>o});var i=JSON.parse('{"id":"connectors/roku/adobe-edge/API-reference","title":"Adobe Edge Platform Connector API","description":"The attributes, methods and events for the THEOAEPConnector.","source":"@site/theoplayer/connectors/roku/adobe-edge/02-API-reference.mdx","sourceDirName":"connectors/roku/adobe-edge","slug":"/connectors/roku/adobe-edge/API-reference","permalink":"/documentation/pr-preview/pr-300/theoplayer/connectors/roku/adobe-edge/API-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/THEOplayer/documentation/blob/-/theoplayer/connectors/roku/adobe-edge/02-API-reference.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"API reference","sidebar_custom_props":{"icon":"*\uFE0F\u20E3"}},"sidebar":"roku","previous":{"title":"Getting started","permalink":"/documentation/pr-preview/pr-300/theoplayer/connectors/roku/adobe-edge/getting-started-aep-connector"},"next":{"title":"API references","permalink":"/documentation/pr-preview/pr-300/theoplayer/api-reference/roku"}}'),s=t("85893"),r=t("50065");let d={sidebar_label:"API reference",sidebar_custom_props:{icon:"*\uFE0F\u20E3"}},o="Adobe Edge Platform Connector API",a={},c=[{value:"Attributes",id:"attributes",level:2},{value:"Methods",id:"methods",level:2},{value:"AEP Connector Config",id:"aep-connector-config",level:3},{value:"Session Details and Config",id:"session-details-and-config",level:3},{value:"THEOAEPMediaSessionDetails",id:"theoaepmediasessiondetails",level:4},{value:"Session Config",id:"session-config",level:4},{value:"Getting the Experience Cloud ID",id:"getting-the-experience-cloud-id",level:3},{value:"Reusing an existing AEP SDK library",id:"reusing-an-existing-aep-sdk-library",level:3},{value:"Supported media events",id:"supported-media-events",level:3}];function l(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"adobe-edge-platform-connector-api",children:"Adobe Edge Platform Connector API"})}),"\n",(0,s.jsx)(n.p,{children:"The attributes, methods and events for the THEOAEPConnector."}),"\n",(0,s.jsx)(n.h2,{id:"attributes",children:"Attributes"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Access Permission"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"id"}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"read,write"}),(0,s.jsx)(n.td,{children:"The id of the node."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ecid"}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{children:"invalid"}),(0,s.jsx)(n.td,{children:"read"}),(0,s.jsx)(n.td,{children:"User's Experience Cloud ID."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"MEDIA_EVENTS"}),(0,s.jsx)(n.td,{children:"associativeArray"}),(0,s.jsx)(n.td,{children:"AEP Media Events"}),(0,s.jsx)(n.td,{children:"read"}),(0,s.jsx)(n.td,{children:"Constant with the AEP media event enums."})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Method"}),(0,s.jsx)(n.th,{children:"Params"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"configure"}),(0,s.jsx)(n.td,{children:"player: THEOplayer, configuration: THEOAEPConfiguration"}),(0,s.jsx)(n.td,{children:"Adds the THEOplayer instance to monitor, and applies a configuration to the AEP SDK."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"destroy"}),(0,s.jsx)(n.td,{children:"none"}),(0,s.jsx)(n.td,{children:"Destroy the connector. It also ends the current session, if any."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"endSession"}),(0,s.jsx)(n.td,{children:"none"}),(0,s.jsx)(n.td,{children:"End the current AEP session, but do not destroy the connector."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"getExperienceCloudId"}),(0,s.jsx)(n.td,{children:"none"}),(0,s.jsxs)(n.td,{children:["Retrieves the ECID for the user. The ECID will be added to the ",(0,s.jsx)(n.code,{children:"ecid"})," field on the connector once it has been retrieved."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"resetIdentities"}),(0,s.jsx)(n.td,{children:"none"}),(0,s.jsx)(n.td,{children:"Resets the identities used in the SDK for the user."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"sendMediaEvent"}),(0,s.jsx)(n.td,{children:"eventXDM: AssociativeArray"}),(0,s.jsx)(n.td,{children:"Send a media event to AEP."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"setContentInfo"}),(0,s.jsx)(n.td,{children:"contentMetadata: AssociativeArray"}),(0,s.jsx)(n.td,{children:"Sets or updates the content metadata for the current session. Partials are supported and will be merged with the existing content metadata. See below for the schema of content metadata."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"setExperienceCloudId"}),(0,s.jsx)(n.td,{children:"ecid: string"}),(0,s.jsx)(n.td,{children:"Sets a pre-existing ECID for the user on the SDK."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"startSession"}),(0,s.jsx)(n.td,{children:"sessionDetails: THEOAEPMediaSessionDetails, sessionConfig: (optional) object"}),(0,s.jsx)(n.td,{children:"Starts a AEP session with the supplied session details and optional config. See below for the schema of details and config."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"stopAndStartNewSession"}),(0,s.jsx)(n.td,{children:"sessionDetails: THEOAEPMediaSessionDetails, sessionConfig: (optional) object"}),(0,s.jsx)(n.td,{children:"Stops the existing session if any. Starts a AEP session with the supplied session details and optional config. See below for the schema of details and config."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"aep-connector-config",children:"AEP Connector Config"}),"\n",(0,s.jsx)(n.p,{children:"The configuration the AEP connector is the THEOConnectorConfiguration interface."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-brightscript",children:'configuration = {\n	configId: "<MY_CONFIGURATION_ID>",\n    domainName: "<MY_EDGE_DOMAIN>",\n    mediaChannel: "My Channel",\n    mediaPlayerName: "My Player",\n    mediaAppVersion: "1.0.0"\n    logLevel: 3\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"logLevel"})," property is optional. The accepted values are (VERBOSE: ",(0,s.jsx)(n.code,{children:"0"}),", DEBUG: ",(0,s.jsx)(n.code,{children:"1"}),", INFO: ",(0,s.jsx)(n.code,{children:"2"}),", WARNING: ",(0,s.jsx)(n.code,{children:"3"}),", ERROR: ",(0,s.jsx)(n.code,{children:"4"}),")."]}),"\n",(0,s.jsx)(n.h3,{id:"session-details-and-config",children:"Session Details and Config"}),"\n",(0,s.jsxs)(n.p,{children:["The session details and session config control the metadata for the session you're starting. See the ",(0,s.jsx)(n.a,{href:"https://github.com/adobe/aepsdk-roku/blob/main/Documentation/api-reference.md#createMediaSession",children:"AEP SDK documentation"})," for expected values. The ",(0,s.jsx)(n.code,{children:"customMetadata"})," property is optional. Values on that object must be strings."]}),"\n",(0,s.jsx)(n.h4,{id:"theoaepmediasessiondetails",children:"THEOAEPMediaSessionDetails"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-brightscript",children:'aepSessionDetails = {\n	streamType: "vod"\n    friendlyName: "My Asset",\n    name: "my-media-id",\n    length: 596,\n    contentType: "video",\n    customMetadata: {\n		key1: "value1",\n		key2: "value2"\n	}\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"session-config",children:"Session Config"}),"\n",(0,s.jsxs)(n.p,{children:["The optional session config should follow the schema described in the ",(0,s.jsx)(n.a,{href:"https://github.com/adobe/aepsdk-roku/blob/main/Documentation/api-reference.md#createMediaSession",children:"AEP SDK documentation"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-brightscript",children:'aepSessionConfig = {}\naepSessionConfig["config.channel"] = "My Channel"\naepSessionConfig["config.adpinginterval"] = 5\naepSessionConfig["config.mainpinginterval"] = 30\n'})}),"\n",(0,s.jsx)(n.h3,{id:"getting-the-experience-cloud-id",children:"Getting the Experience Cloud ID"}),"\n",(0,s.jsxs)(n.p,{children:["To get an ECID for a user, you'll need to observe the ",(0,s.jsx)(n.code,{children:"ecid"})," field on the connector, and then call ",(0,s.jsx)(n.code,{children:"getExperienceCloudId"})," on the connector. The field will update with the ECID when it is available and trigger your observer."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-brightscript",children:'m.aepConnector.observeField("ecid", "onEcidChange")\n\nsub onEcidChange( event as object )\n	m.myEcid = event.getData()\nend sub\n\nm.aepConnector.callFunc("getExperienceCloudId")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"reusing-an-existing-aep-sdk-library",children:"Reusing an existing AEP SDK library"}),"\n",(0,s.jsx)(n.p,{children:"The AEP SDK allows you to reuse instances of the SDK in case you're already using the AEP SDK in your application. This is done by adding a Task node to the scene. The THEO AEP Connector can reuse this Task node. In the MainScene.brs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-brightscript",children:"m.aepSDK = AdobeAEPSDKInit()\nm.top.appendChild(m.aepSDK.getTaskNode())\n"})}),"\n",(0,s.jsx)(n.p,{children:"As long as the task node is on the Scene before the connector is configured, the THEO AEP connector can pick up the AEP Task node and reuse it."}),"\n",(0,s.jsx)(n.h3,{id:"supported-media-events",children:"Supported media events"}),"\n",(0,s.jsx)(n.p,{children:"The THEO AEP Connector will automatically detect most media events and send them to AEP for you, including player commands such as play or pause and events like bitrate change. It will not send media events related to chapters in this version:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"media.chapterStart"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"media.chapterComplete"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"media.chapterSkip"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For these you may use the ",(0,s.jsx)(n.code,{children:"sendMediaEvent"})," method and construct your own XDM payload:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-brightscript",children:'chapterStartXDM = {\n  "xdm": {\n    "eventType": m.aepConnector.MEDIA_EVENTS.CHAPTER_START\n    "mediaCollection": {\n      "playhead": m.theoPlayer.currentTime,\n      "chapterDetails": {\n        "friendlyName": "My Chapter",\n        "index": 1,\n        "length": 300,\n        "offset": 0\n      }\n    }\n  }\n}\n\nm.aepConnector.callFunc("sendMediaEvent", chapterStartXDM)\n'})})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return d}});var i=t(67294);let s={},r=i.createContext(s);function d(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);