"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["6297"],{788088:function(e,a,i){i.r(a),i.d(a,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>l});var n=i(489237),r=i(785893),t=i(250065);let o={},s="MediaTailor",d={},l=[{value:"Web SDK",id:"web-sdk",level:3},{value:"Configuration",id:"configuration",level:4},{value:"Limitations",id:"limitations",level:4},{value:"Android SDK",id:"android-sdk",level:3}];function c(e){let a={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"mediatailor",children:"MediaTailor"})}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.a,{href:"https://docs.aws.amazon.com/mediatailor/index.html",children:"AWS Elemental MediaTailor"})," is a service that provides scalable ad insertion and channel assembly. It is able to serve targeted ad content to viewers and create linear streams while maintaining broadcast quality in over-the-top (OTT) video applications. It supports HLS and DASH for both VOD and live workflows."]}),"\n",(0,r.jsx)(a.p,{children:"At the moment of writing only linear ads are supported, but it is possible to expand it to non-linear and companion ads as well."}),"\n",(0,r.jsx)(a.h3,{id:"web-sdk",children:"Web SDK"}),"\n",(0,r.jsx)(a.h4,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(a.p,{children:"There are three requirements to use a MediaTailor stream with THEOplayer:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["Have a THEOplayer build with the ",(0,r.jsx)(a.code,{children:"mediatailor"})," feature flag set."]}),"\n",(0,r.jsxs)(a.li,{children:["The ",(0,r.jsx)(a.code,{children:"src"})," is set to the session initialization URL."]}),"\n",(0,r.jsxs)(a.li,{children:["The integration parameter is set with the value ",(0,r.jsx)(a.code,{children:"mediatailor"}),"."]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"If everything is set up correctly, THEOplayer will play the stream and send the necessary tracking beacons."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-js",children:"const player = new THEOplayer.Player(element, {\n    libraryLocation: 'path/to/theoplayer',\n    license: 'your-license-here',\n    ...\n});\n\nplayer.source = {\n    sources: [\n        {\n            src: '<mediatailorURL>/v1/session/<hashed-account-id>/<origin-id>/<asset-id>',\n            integration: 'mediatailor'\n        }\n    ]\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Optionally, you can pass parameters regarding e.g. session data and device type by using the ",(0,r.jsx)(a.code,{children:"adsParams"})," property, as\ndescribed in the ",(0,r.jsx)(a.a,{href:"https://docs.aws.amazon.com/mediatailor/latest/ug/ad-reporting-client-side.html#ad-reporting-client-side-enabling",children:"MediaTailor documentation"}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-js",children:"player.source = {\n  sources: [\n    {\n      src: '...',\n      integration: 'mediatailor',\n      adsParams: {\n        param1: 'value1', // key is not case sensitive\n        param2: 'value2', // Values can contain spaces. For example, 'value 2' is an allowed value.\n      },\n    },\n  ],\n};\n"})}),"\n",(0,r.jsx)(a.h4,{id:"limitations",children:"Limitations"}),"\n",(0,r.jsx)(a.p,{children:"The scope of the MediaTailor integration for now is limited to sending the tracking beacons. This encapsulates only the events that can be sent with the default implementation of THEOplayer. For example skipping an ad is not yet supported so the events that correspond to skipping an ad will never occur."}),"\n",(0,r.jsxs)(a.p,{children:["Seeking is only disabled during an ad, no logic is in place for playing an ad if the user ",(0,r.jsx)(a.em,{children:"seeked"})," past it."]}),"\n",(0,r.jsx)(a.h3,{id:"android-sdk",children:"Android SDK"}),"\n",(0,r.jsxs)(a.p,{children:["To use a MediaTailor stream with THEOplayer on Android SDK, first import our MediaTailor module dependency in your ",(0,r.jsx)(a.code,{children:"build.gradle"})," file."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-groovy",children:"implementation 'com.theoplayer.theoplayer-sdk-android:core:+'\nimplementation 'com.theoplayer.theoplayer-sdk-android:integration-ads-mediatailor:+' // add MediaTailor dependency\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Then, add the MediaTailor integration to the ",(0,r.jsx)(a.code,{children:"Player"}),"."]}),"\n",(0,r.jsx)(a.admonition,{type:"tip",children:(0,r.jsxs)(a.p,{children:["If you're using ",(0,r.jsx)(a.a,{href:"/documentation/pr-preview/pr-428/theoplayer/v9/getting-started/sdks/android/features#adding-integrations-automatically",children:"automatic integrations"}),", you can skip this step."]})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-kotlin",children:"val theoplayerView = THEOplayerView(context)\nval mediaTailorIntegration = MediaTailorIntegrationFactory.createMediaTailorIntegration(theoPlayerView);\ntheoplayerView.player.addIntegration(mediaTailorIntegration)\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Finally, set a ",(0,r.jsx)(a.a,{href:"pathname:///theoplayer/v9/api-reference/android/com/theoplayer/android/api/source/mediatailor/MediaTailorSource.html",children:(0,r.jsx)(a.code,{children:"MediaTailorSource"})})," to play."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-kotlin",children:'val mediaTailorSource = MediaTailorSource(src = "<mediatailorURL>/v1/session/<hashed-account-id>/<origin-id>/<asset-id>")\n\ntheoplayerView.player.source = SourceDescription(listOf(mediaTailorSource))\n\n// or using the Builder pattern\n\nval mediaTailorSource = MediaTailorSource\n    .Builder("<mediatailorURL>/v1/session/<hashed-account-id>/<origin-id>/<asset-id>")\n    .build()\n\ntheoplayerView.player.source = SourceDescription\n    .Builder(mediaTailorSource)\n    .build()\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Optionally, you can pass parameters regarding e.g. session data and device type by using the ",(0,r.jsx)(a.code,{children:"adsParams"})," property, as\ndescribed in the ",(0,r.jsx)(a.a,{href:"https://docs.aws.amazon.com/mediatailor/latest/ug/ad-reporting-client-side.html#ad-reporting-client-side-enabling",children:"MediaTailor documentation"}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-kotlin",children:'val adsParams = emptyMap<String, String>().toMutableMap()\nadsParams["param1"] = "value1"\nadsParams["param2"] = "value 2"\nval mediaTailorSource = MediaTailorSource(\n    src = "<mediatailorURL>/v1/session/<hashed-account-id>/<origin-id>/<asset-id>",\n    adParams = adsParams    // Note the deprecated parameter name\n)\n\n// or using the Builder pattern\n\nval mediaTailorSource = MediaTailorSource\n    .Builder("<mediatailorURL>/v1/session/<hashed-account-id>/<origin-id>/<asset-id>")\n    .adsParams(adsParams)\n    .build()\n'})}),"\n",(0,r.jsx)(a.admonition,{title:"Deprecated",type:"note",children:(0,r.jsxs)(a.p,{children:["The source definition currently still uses the deprecated ",(0,r.jsx)(a.code,{children:"adParams"})," property. This will be\nreplaced by the ",(0,r.jsx)(a.code,{children:"adsParams"})," property in a future version."]})})]})}function h(e={}){let{wrapper:a}={...(0,t.a)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},250065:function(e,a,i){i.d(a,{Z:()=>s,a:()=>o});var n=i(667294);let r={},t=n.createContext(r);function o(e){let a=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(t.Provider,{value:a},e.children)}},489237:function(e){e.exports=JSON.parse('{"id":"how-to-guides/ads/mediatailor","title":"MediaTailor","description":"AWS Elemental MediaTailor is a service that provides scalable ad insertion and channel assembly. It is able to serve targeted ad content to viewers and create linear streams while maintaining broadcast quality in over-the-top (OTT) video applications. It supports HLS and DASH for both VOD and live workflows.","source":"@site/theoplayer_versioned_docs/version-v9/how-to-guides/01-ads/12-mediatailor.md","sourceDirName":"how-to-guides/01-ads","slug":"/how-to-guides/ads/mediatailor","permalink":"/documentation/pr-preview/pr-428/theoplayer/v9/how-to-guides/ads/mediatailor","draft":false,"unlisted":false,"editUrl":"https://github.com/THEOplayer/documentation/blob/-/theoplayer_versioned_docs/version-v9/how-to-guides/01-ads/12-mediatailor.md","tags":[],"version":"v9","sidebarPosition":12,"frontMatter":{},"sidebar":"roku","previous":{"title":"How to subscribe to ad events","permalink":"/documentation/pr-preview/pr-428/theoplayer/v9/how-to-guides/ads/how-to-subscribe-to-ad-events"},"next":{"title":"Custom Server Side Ad Insertion","permalink":"/documentation/pr-preview/pr-428/theoplayer/v9/how-to-guides/ads/custom-ssai-integration"}}')}}]);