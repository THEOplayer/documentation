"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["29850"],{75614:function(e,t,n){n.r(t),n.d(t,{default:()=>d,frontMatter:()=>o,metadata:()=>r,assets:()=>l,toc:()=>h,contentTitle:()=>s});var r=JSON.parse('{"id":"playout-configuration/security-per-channel-per-alias/token-based-security","title":"Token based security","description":"THEOlive offers the option to enable JWT token security on channel alias level. This can be interesting if you only want valid users to access your stream.","source":"@site/theolive/playout-configuration/security-per-channel-per-alias/token-based-security.md","sourceDirName":"playout-configuration/security-per-channel-per-alias","slug":"/playout-configuration/security-per-channel-per-alias/token-based-security","permalink":"/documentation/pr-preview/pr-221/theolive/playout-configuration/security-per-channel-per-alias/token-based-security","draft":false,"unlisted":false,"editUrl":"https://github.com/THEOplayer/documentation/blob/-/theolive/playout-configuration/security-per-channel-per-alias/token-based-security.md","tags":[],"version":"current","frontMatter":{},"sidebar":"theolive","previous":{"title":"Geo-blocking","permalink":"/documentation/pr-preview/pr-221/theolive/playout-configuration/security-per-channel-per-alias/geo-blocking"},"next":{"title":"Overview","permalink":"/documentation/pr-preview/pr-221/theolive/theolive-through-embed/"}}'),i=n("85893"),a=n("50065");let o={},s="Token based security",l={},h=[{value:"How it works",id:"how-it-works",level:2},{value:"Enable or disable token security for an alias",id:"enable-or-disable-token-security-for-an-alias",level:2},{value:"Passing headers with the THEOlive npm player",id:"passing-headers-with-the-theolive-npm-player",level:2},{value:"1. Create a header provider",id:"1-create-a-header-provider",level:3},{value:"2. Pass the header provider to the THEOlive player",id:"2-pass-the-header-provider-to-the-theolive-player",level:3}];function c(e){let t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"token-based-security",children:"Token based security"})}),"\n",(0,i.jsx)(t.p,{children:"THEOlive offers the option to enable JWT token security on channel alias level. This can be interesting if you only want valid users to access your stream."}),"\n",(0,i.jsx)(t.p,{children:"In this document, we will"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"explain how it works"}),"\n",(0,i.jsx)(t.li,{children:"how to enable/disable it via the console and API"}),"\n",(0,i.jsx)(t.li,{children:"how to configure your THEOlive player to pass the mandatory headers"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,i.jsxs)(t.p,{children:["When enabling token security on a channel alias, we expect you to share the shared (private) key in case of HS256/HS512 or the public key in case of RS256/RS512 encryption. This will be used on CDN level to determine if a request (with a Bearer token passed in the ",(0,i.jsx)(t.code,{children:"Authorization"})," header) is valid or not. It's up to you to configure this header correctly through our ",(0,i.jsx)(t.a,{href:"https://www.npmjs.com/package/@theolive/player",children:"THEOlive npm player"}),". Later in this document we will explain how."]}),"\n",(0,i.jsx)(t.p,{children:"In the bearer token that gets sent to us, we expect the following properties to be available:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"exp"}),": date in epoch format until which the JWT token is valid"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"nbf"}),': optional date in epoch format. Stands for "not before" and acts as a "start date" of the JWT to be valid.']}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"When not passing a bearer token for a secured channel, the request will be rejected."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"token based security",src:n(26259).Z+"",width:"720",height:"306"})}),"\n",(0,i.jsx)(t.h2,{id:"enable-or-disable-token-security-for-an-alias",children:"Enable or disable token security for an alias"}),"\n",(0,i.jsxs)(t.p,{children:["Please refer to the ",(0,i.jsx)(t.a,{href:"https://developers.theo.live/reference/enable-token-security-for-alias",children:"Enable token security for alias"})," and ",(0,i.jsx)(t.a,{href:"https://developers.theo.live/reference/disable-token-security-for-alias",children:"Disable token security for alias"})," API endpoints to manage the token security settings for an alias."]}),"\n",(0,i.jsxs)(t.p,{children:["When enabling for the first time, you have to pass the ",(0,i.jsx)(t.code,{children:"key"})," property in the body. If you disable token security later on, and make it active again, you can omit this property if it should stay the same."]}),"\n",(0,i.jsx)(t.p,{children:"If you're using the THEOlive management console, you can navigate to a player details page and select the alias you want to enable/disable token security for. When enabling, please pass the correct shared or public key to use. Don't forget to confirm your changes by hitting the save button!"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Managing token security in the console",src:n(85667).Z+"",width:"1323",height:"770"})}),"\n",(0,i.jsx)(t.h2,{id:"passing-headers-with-the-theolive-npm-player",children:"Passing headers with the THEOlive npm player"}),"\n",(0,i.jsxs)(t.p,{children:["In order to integrate token based security in your application, you have to make use of the ",(0,i.jsx)(t.a,{href:"/documentation/pr-preview/pr-221/theolive/theolive-through-npm/",children:"THEOlive npm player"}),"."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"Passing headers isn't possible when using the embed player!"})}),"\n",(0,i.jsx)(t.h3,{id:"1-create-a-header-provider",children:"1. Create a header provider"}),"\n",(0,i.jsxs)(t.p,{children:["First thing to do is to create a header provider function. In this function you add the ",(0,i.jsx)(t.code,{children:"Authorization"})," header which contains a bearer token generated by you. This token should at least contain a ",(0,i.jsx)(t.code,{children:"exp"})," property, and an optional ",(0,i.jsx)(t.code,{children:"nbf"})," property. You can add as many other properties to it as you want, but THEOlive doesn't do anything with them."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",metastring:"Creating header provider",children:"const headerProvider = (url) => {\n  return new Headers({\n    Authorization: 'Bearer <token-generated-by-you>',\n  });\n};\n"})}),"\n",(0,i.jsx)(t.h3,{id:"2-pass-the-header-provider-to-the-theolive-player",children:"2. Pass the header provider to the THEOlive player"}),"\n",(0,i.jsx)(t.p,{children:"Once you've created the header provider, you have to pass it to the THEOlive player instance. This can be done in the following way:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",metastring:"Pass header provider to player",children:"const player = new THEOLive.Player(document.getElementById('player'));\nplayer.addHeaderProvider(headerProvider);\n"})}),"\n",(0,i.jsx)(t.p,{children:"The player will now include the header in every request that gets made towards the CDN to grab content. Passing no or an invalid token will result in an unauthorized error and prevent users from watching the stream."})]})}function d(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},85667:function(e,t,n){n.d(t,{Z:function(){return r}});let r=n.p+"assets/images/51376b6-token-d85cdc1dbfb111642fa9b7f764b921e6.png"},26259:function(e,t,n){n.d(t,{Z:function(){return r}});let r=n.p+"assets/images/dcdfc37-token_security-198f04847aec73ad4f237ac1e8c7c650.png"},50065:function(e,t,n){n.d(t,{Z:function(){return s},a:function(){return o}});var r=n(67294);let i={},a=r.createContext(i);function o(e){let t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);