"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["22728"],{999106:function(e,n,t){t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var o=t(977234),r=t(785893),i=t(250065);let a={sidebar_position:2},s="Token based security",l={},d=[{value:"Setting up the Android THEOplayer SDK for THEOlive",id:"setting-up-the-android-theoplayer-sdk-for-theolive",level:2},{value:"Configuring THEOplayer to pass the token",id:"configuring-theoplayer-to-pass-the-token",level:2},{value:"Dealing with token expiry and rotation",id:"dealing-with-token-expiry-and-rotation",level:2},{value:"Clearing the token",id:"clearing-the-token",level:2}];function c(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"token-based-security",children:"Token based security"})}),"\n",(0,r.jsxs)(n.p,{children:["THEOlive offers the option to enable JWT token security on a distribution (formerly referred to as an alias) level. This can be interesting if you only want valid users to access your stream. Read more about the feature and configuring it on your channels on the ",(0,r.jsx)(n.a,{href:"/theolive/platform/security/token-based-security",children:"token based security guide"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"This page will demonstrate how to configure the Android SDK for playback of channels with token based security enabled."}),"\n",(0,r.jsx)(n.h2,{id:"setting-up-the-android-theoplayer-sdk-for-theolive",children:"Setting up the Android THEOplayer SDK for THEOlive"}),"\n",(0,r.jsxs)(n.p,{children:["Refer to the ",(0,r.jsx)(n.a,{href:"../getting-started",children:"getting started guide"})," for the prerequisite steps in getting the web SDK up and running for THEOlive playback."]}),"\n",(0,r.jsx)(n.h2,{id:"configuring-theoplayer-to-pass-the-token",children:"Configuring THEOplayer to pass the token"}),"\n",(0,r.jsxs)(n.p,{children:["The token needs to be passed along with player requests as a Bearer token in the ",(0,r.jsx)(n.code,{children:"Authorization"})," header of the requests. To do so we can make use of the Network API of the player, which works as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"val token = getToken() // Generate or request your token, for more information check the token based security guide linked above.\nplayer.theoLive.authToken = token\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will ensure the player includes your authorization header on all subsequent requests it performs for playback of your THEOlive distribution."}),"\n",(0,r.jsx)(n.h2,{id:"dealing-with-token-expiry-and-rotation",children:"Dealing with token expiry and rotation"}),"\n",(0,r.jsx)(n.p,{children:"If your tokens are short-lived, you want to make sure to update the token being passed to the player and requests before it expires, to allow playback to continue beyond expiry. This can simply be done by updating the header on the player in the same way. For example, one could check on an interval that makes sense for your token lifespan whether the token is about to expire and update when necessary, for example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'private var token: String? = null\nprivate var tokenUpdateJob: Job? = null\n\n// Helper function to check whether your token will expire within one minute from now\nprivate fun tokenWillExpireSoon(): Boolean {\n    val currentToken = token ?: return true\n\n    return try {\n        val parts = currentToken.split(".")\n        if (parts.size < 2) return true\n\n        val payload = String(Base64.decode(parts[1], Base64.DEFAULT))\n        val jsonPayload = JSONObject(payload)\n        val exp = jsonPayload.getLong("exp").seconds\n        val now = System.currentTimeMillis().milliseconds\n\n        exp - now <= 60.seconds\n    } catch (e: Exception) {\n        true // If parsing fails, assume token needs refresh\n    }\n}\n\nprivate fun maybeUpdateToken() {\n    if (token == null || tokenWillExpireSoon()) {\n        token = getToken() // Generate or request your token\n        token?.let { newToken ->\n            player.theoLive.authToken = newToken\n        }\n    }\n}\n\n// Start the token management\nprivate fun startTokenManagement(scope: CoroutineScope) {\n    scope.launch {\n        maybeUpdateToken() // Initial token update\n\n        // Check every 30 seconds\n        tokenUpdateJob = scope.launch {\n            while (isActive) {\n                delay(30.seconds)\n                maybeUpdateToken()\n            }\n        }\n    }\n}\n\nfun stopTokenManagement() {\n    tokenUpdateJob?.cancel()\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["For coroutine support with kotlin, ensure you have the ",(0,r.jsx)(n.code,{children:"kotlinx-coroutines-android"})," dependency installed."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-groovy",children:"dependencies {\n    // ... Other dependencies\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVersion'\n}\n"})}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"coroutineVersion"})," represents the library version as defined elsewhere in your project setup."]})]}),"\n",(0,r.jsx)(n.h2,{id:"clearing-the-token",children:"Clearing the token"}),"\n",(0,r.jsx)(n.p,{children:"If the token isn't needed anymore, e.g. when switching to an unprotected distribution or a non-THEOlive source altogether, the header can be simply removed as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"player.theoLive.authToken = null;\n"})})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},250065:function(e,n,t){t.d(n,{Z:()=>s,a:()=>a});var o=t(667294);let r={},i=o.createContext(r);function a(e){let n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}},977234:function(e){e.exports=JSON.parse('{"id":"playback/android/token-based-security","title":"Token based security","description":"THEOlive offers the option to enable JWT token security on a distribution (formerly referred to as an alias) level. This can be interesting if you only want valid users to access your stream. Read more about the feature and configuring it on your channels on the token based security guide.","source":"@site/theolive/playback/android/token-based-security.mdx","sourceDirName":"playback/android","slug":"/playback/android/token-based-security","permalink":"/documentation/pr-preview/pr-396/theolive/playback/android/token-based-security","draft":false,"unlisted":false,"editUrl":"https://github.com/THEOplayer/documentation/blob/-/theolive/playback/android/token-based-security.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"theolive","previous":{"title":"Getting started with THEOlive on Android","permalink":"/documentation/pr-preview/pr-396/theolive/playback/android/getting-started"},"next":{"title":"Getting started with iOS","permalink":"/documentation/pr-preview/pr-396/theolive/playback/ios/getting-started"}}')}}]);